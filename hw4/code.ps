%!PS-Adobe-3.0
%%Title: log.py, __init__.py, model.py, independent_variable.py, fonseca.py, kursawe.py, schaffer.py, viennet3.py, zdt1.py, zdt3.py
%%For: Jim Witschey
%%Creator: a2ps version 4.14
%%CreationDate: Mon Oct  6 20:16:51 2014
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 11
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.060185 def
/cw 4.236111 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   520.335631 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T ("""## Log Stuff) p n
0 T () N
0 T (Adapted from [Dr. Tim Menzies' logging code]\(https://github.com/timm/sbse14/blob) N
0 T (/master/log.py\).) N
0 T () N
(5) # (Logs are places to store records of past events. There are two types of logs:) N
0 T () N
0 T (+ _Num_ : for numbers) N
0 T (+ _Sym_ : for everything else. ) N
0 T () N
(10) # (Those logs can be queried to find e.g. the highest) N
0 T (and lowest value of the number seen so far. Alternatively,) N
0 T (they can be queried to return values at the same probability) N
0 T (as the current log contents.) N
0 T () N
(15) # (### Max Log Size) N
0 T () N
0 T (To avoid logs consuming all memory, logs store at) N
0 T (most _The.cache.keep_ entries \(e.g. 128\):) N
0 T () N
(20) # (+ If more) N
0 T (than that number of entries arrive, then some old) N
0 T (entry \(selected at random\) will be deleted.) N
0 T (+ The nature of this cache means that some rare) N
0 T (events might be missed. To check for that, running) N
(25) # (the code multiple times and, each time, double the) N
0 T (cache size. Stop when doubling the cache size stops) N
0 T (changing the output.) N
0 T () N
0 T (Just as an example of that process, here we are logging 1,000,000 numbers in a l) N
0 T (og with a cache of size 16.) N
(30) # (Note that the resulting cache is much smaller than 1,000,000 items. Also, the co) N
0 T (ntents of the cache) N
0 T (come from the entire range one to one million \(so our log is not biased to just ) N
0 T (the first few samples:) N
0 T () N
0 T ( % python -i log.py) N
0 T ( >>> The.cache.keep = 16) N
(35) # ( >>> log = Num\(\)  ) N
0 T ( >>> for x in xrange\(1000000\): log += x ) N
0 T ( >>> sorted\(log._cache\)) N
0 T ( [77748, 114712, 122521, 224268, ) N
0 T ( 289880, 313675, 502464, 625036, ) N
(40) # ( 661881, 663207, 680085, 684674, ) N
0 T ( 867075, 875594, 922141, 945896]) N
0 T ( >>> ) N
0 T () N
0 T ( ### Caching Slow Reports) N
(45) # () N
0 T ( Some of the things we want to report from these logs take a little while to cal) N
0 T (culate \(e.g. finding the median) N
0 T (    requires a sort of a numeric cache\):) N
0 T () N
0 T (+ Such reports should be run and cached so they can be accessed many time withou) N
0 T (t the need) N
(50) # (for tedious recalculation. ) N
0 T (+ These reports become outdated if new log information arrives so the following) N
0 T (code deletes these reports if ever new data arrives.) N
0 T (+ The protocol for access those reports is to call _log.has\(\).x_ where "x" is a ) N
0 T (field) N
0 T (generated by the report.  Log subclasses generate reports using the special _rep) N
0 T (ort\(\)_ method) N
(55) # (\(see examples, below\).) N
0 T () N
0 T (Just as an example of reporting, after the above run \(where we logged 1,000,000 ) N
0 T (numbers\), the following reports are available:) N
0 T () N
0 T (>>> log.has\(\).lo) N
(60) # (0 ) N
0 T (>>> log.has\(\).hi) N
0 T (945896) N
0 T (>>> print log.has\(\).median # 50th percentile) N
0 T (662544.0) N
("csc710sbse: hw4: Witschey") (Page 1/6) (Oct 06, 14 16:53) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(65) # (>>> print log.has\(\).iqr # \(75-25\)th percentile) p n
0 T (205194) N
0 T () N
0 T (Note that our median is not as expected \(it should be around half a million\). Wh) N
0 T (y? Well, clearly a cache of size 16 is) N
0 T (too small to track a million numbers. So how many numbers do we need? Well, that) N
0 T ( depends on the distribution being explored) N
(70) # (but here's how the median is effected by cache size for uniform distributions:) N
0 T () N
0 T (>>> for size in [16,32,64,128,256]:) N
0 T (...     The.cache.keep=size) N
0 T (...     log = Num\(\)) N
(75) # (...     for x in xrange\(1000000\): log += x) N
0 T (...     print size, ":" log.has\(\).median) N
0 T (... ) N
0 T (16 : 637374.5) N
0 T (32 : 480145.5) N
(80) # (64 : 520585.5) N
0 T (128 : 490742.0) N
0 T (256 : 470870.5) N
0 T () N
0 T () N
(85) # (Note that we get pretty close to half a million with cache sizes at 32 or above.) N
0 T ( And the lesson: sometimes, a limited) N
0 T (sample can offer a useful approximation to a seemingly complex process.) N
0 T () N
0 T (## Standard Header) N
0 T (""") N
(90) # (from __future__ import division, print_function) N
0 T (import sys, random, math, datetime, time, re) N
0 T (from base import memo) N
0 T (import base) N
0 T (import functools) N
(95) # () N
0 T (class Log\(object\):) N
0 T (    "Keep a random sample of stuff seen so far.") N
0 T () N
0 T (    def __init__\(self, inits=None, label=None, max_size=256\):) N
(100) # (        self._cache            = []) N
0 T (        self._n                = 0) N
0 T (        self._report           = None) N
0 T (        self.label             = label or '') N
0 T (        self.max_size          = max_size) N
(105) # (        self._valid_statistics = False) N
0 T (        if inits:) N
0 T (            map\(self.__iadd__, inits\)) N
0 T () N
0 T (    def random_index\(self\):) N
(110) # (        return base.random_index\(self._cache\)) N
0 T () N
0 T (    def __iadd__\(self, x\):) N
0 T (        if x is None:) N
0 T (            return x) N
(115) # () N
0 T (        if isinstance\(x, Log\):) N
0 T (            map\(self.__iadd__, x._cache\)) N
0 T () N
0 T (        self._n += 1) N
(120) # (        changed = False) N
0 T () N
0 T (        # if cache has room, add item) N
0 T (        if self.max_size is None or len\(self._cache\) < self.max_size:) N
0 T (            changed = True) N
(125) # (            self._cache.append\(x\)) N
0 T (        # cache is full: maybe replace an old item) N
0 T (        else: ) N
0 T (            # items less likely to be replaced later in the run:) N
0 T (            # leads to uniform sample of entire run) N
(130) # (            if random.random\(\) <= self.max_size / self._n:) N
0 T (                changed = True) N
0 T (                self._cache[self.random_index\(\)] = x) N
0 T () N
0 T (        if changed:) N
("csc710sbse: hw4: Witschey") (Page 2/6) (Oct 06, 14 16:53) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/log.py) (1/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(135) # (            self._invalidate_statistics\(\)) p n
0 T (            self._change\(x\)) N
0 T () N
0 T (        return self) N
0 T () N
(140) # (    def __add__\(self, x\):) N
0 T (        inits = self._cache + x._cache) N
0 T (        return NumberLog\(inits=inits, label='generated via __add__', max_size=No) N
0 T (ne\)) N
0 T () N
0 T (    def any\(self\):) N
(145) # (        return random.choice\(self._cache\)) N
0 T () N
0 T (    def report\(self\):) N
0 T (        if self._report is None:) N
0 T (            self._report = self.generate_report\(\)) N
(150) # (        return self._report) N
0 T () N
0 T (    def setup\(self\):) N
0 T (        raise NotImplementedError\(\)) N
0 T () N
(155) # (    def contents\(self\):) N
0 T (        # slow, but most generic copy implementation) N
0 T (        return copy.deepcopy\(self._cache\)) N
0 T () N
0 T (    def _invalidate_statistics\(self\):) N
(160) # (        ''') N
0 T (        default implementation. if _valid_statistics is something other than) N
0 T (        a boolean, reimplement!) N
0 T (        ''') N
0 T (        self._valid_statistics = False) N
(165) # () N
0 T (    def ish\(self, *args, **kwargs\):) N
0 T (        raise NotImplementedError\(\)) N
0 T () N
0 T (    def _change\(self, x\):) N
(170) # (        ''') N
0 T (        override to add incremental updating functionality) N
0 T (        ''') N
0 T (        pass) N
0 T () N
(175) # (    def _prepare_data\(self\):) N
0 T (        s = '_prepare_data\(\) not implemented for ' + self.__class__.__name__) N
0 T (        raise NotImplementedError\(s\)) N
0 T () N
0 T (    @staticmethod) N
(180) # (    def log_for\(t\):) N
0 T (        if t == int or t == float or isinstance\(t, \(int, float\)\):) N
0 T (            return NumberLog\(\)) N
0 T (        else:) N
0 T (            return SymbolLog\(\)) N
(185) # () N
0 T () N
0 T (def statistic\(f\):) N
0 T (    ''') N
0 T (    decorator for log functions that return statistics about contents.) N
(190) # (    if _valid_statistics is False, generate valid stats before calling) N
0 T (    the wrapped function.) N
0 T (    ''') N
0 T (    @functools.wraps\(f\)) N
0 T (    def wrapper\(*args, **kwargs\):) N
(195) # (        self = args[0]) N
0 T (        if not self._valid_statistics:) N
0 T (            self._prepare_data\(\)) N
0 T (        return f\(*args, **kwargs\)) N
0 T () N
(200) # (    return wrapper) N
0 T () N
0 T () N
0 T (""") N
0 T (### Num) N
(205) # () N
0 T (A _Num_ is a _Log_ for numbers. ) N
("csc710sbse: hw4: Witschey") (Page 3/6) (Oct 06, 14 16:53) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T () p n
0 T (+ Tracks _lo_ and _hi_ values. ) N
0 T (+ Reports median and the IQR the \(75-25\)th range.) N
(210) # (+ Generates numbers from the log by a three-way interpolation \(see _ish\(\)_\).) N
0 T () N
0 T () N
0 T (""") N
0 T (class NumberLog\(Log\):) N
(215) # () N
0 T (    def __init__\(self, *args, **kwargs\):) N
0 T (        super\(NumberLog, self\).__init__\(*args, **kwargs\)) N
0 T (        assert self._n == 0) N
0 T () N
(220) # (        # set to values that will be immediately overridden) N
0 T (        self.lo, self.hi = sys.maxint, -sys.maxint) N
0 T () N
0 T (    def _change\(self, x\):) N
0 T (        # update lo,hi) N
(225) # (        self.lo = min\(self.lo, x\)) N
0 T (        self.hi = max\(self.hi, x\)) N
0 T () N
0 T (    def _prepare_data\(self\):) N
0 T (        if not self._valid_statistics:) N
(230) # (            self._cache.sort\(\)) N
0 T (        self._valid_statistics = True) N
0 T () N
0 T (    def contents\(self\):) N
0 T (        return list\(self._cache\)) N
(235) # () N
0 T (    def norm\(self,x\):) N
0 T (        "normalize the argument with respect to maximum and minimum") N
0 T (        if self.hi == self.lo:) N
0 T (            raise ValueError\('hi and lo of {} are equal'.format\(self.__name__\)\)) N
(240) # (        return \(x - self.lo\) / \(self.hi - self.lo\)) N
0 T () N
0 T (    def generate_report\(self\):) N
0 T (        return memo\(median=self.median\(\), iqr=self.iqr\(\),) N
0 T (            lo=self.lo, hi=self.hi\)) N
(245) # () N
0 T (    def ish\(self,f=0.1\):) N
0 T (        """return a num likely to be similar to/representative of) N
0 T (        nums in the distribution""") N
0 T (        return self.any\(\) + f*\(self.any\(\) - self.any\(\)\)) N
(250) # () N
0 T (    @statistic) N
0 T (    def median\(self\):) N
0 T (        # implementation from http://stackoverflow.com/a/10482734/3408454) N
0 T (        n = len\(self._cache\)) N
(255) # () N
0 T (        if n % 2:) N
0 T (            return self._cache[n // 2]) N
0 T () N
0 T (        return \(self._cache[n // 2] + self._cache[n // 2 - 1]\) / 2) N
(260) # () N
0 T () N
0 T () N
0 T (    def mean\(self\):) N
0 T (        n = len\(self._cache\)) N
(265) # (        return sum\(self._cache\) / n) N
0 T () N
0 T (    @statistic) N
0 T (    def iqr\(self\):) N
0 T (        n = len\(self._cache\)) N
(270) # (        return self._cache[int\(n*.75\)] - self._cache[int\(n*.5\)]) N
0 T () N
0 T (    def total\(self\):) N
0 T (        return sum\(self._cache\)) N
0 T () N
(275) # (    def better\(self, log2\):) N
0 T (        if not self._cache or not log2._cache: return False) N
0 T (        if self.median\(\) < log2.median\(\): return True) N
0 T (        if self.iqr\(\) < log2.iqr\(\): return True) N
0 T (        return False) N
("csc710sbse: hw4: Witschey") (Page 4/6) (Oct 06, 14 16:53) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/log.py) (2/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(280) # () p n
0 T (    @statistic) N
0 T (    def xtile\(self, lo=0, hi=0.001,) N
0 T (            width=50,) N
0 T (            chops=[0.1, 0.3, 0.5, 0.7, 0.9],) N
(285) # (            marks=["-", " ", " ", "-", " "],) N
0 T (            bar="|", star="*",) N
0 T (            show=" {: >6.2f}"\):) N
0 T (        """The function _xtile_ takes a list of \(possibly\)) N
0 T (        unsorted numbers and presents them as a horizontal) N
(290) # (        xtile chart \(in ascii format\). The default is a ) N
0 T (        contracted _quintile_ that shows the ) N
0 T (        10,30,50,70,90 breaks in the data \(but this can be ) N
0 T (        changed- see the optional flags of the function\).) N
0 T (        """) N
(295) # () N
0 T (        lo = min\(lo, self._cache[0]\)) N
0 T (        hi = max\(hi, self._cache[-1]\)) N
0 T (        if hi == lo:) N
0 T (            hi = hi + .001 # ugh) N
(300) # () N
0 T () N
0 T (        pos = lambda p: self._cache[int\(len\(self._cache\) * p\)]) N
0 T (        place = lambda x: min\(width-1, int\(width * float\(\(x - lo\)\)/\(hi - lo\)\)\)) N
0 T (        pretty = lambda xs: ','.join\([show.format\(x\) for x in xs]\)) N
(305) # () N
0 T (        what    = [pos\(p\)   for p in chops]) N
0 T (        where   = [place\(n\) for n in  what]) N
0 T () N
0 T (        out     = [' '] * width) N
(310) # () N
0 T (        for one,two in base.pairs\(where\):) N
0 T (            for i in range\(one, two\): ) N
0 T (                out[i] = marks[0]) N
0 T (            marks = marks[1:]) N
(315) # () N
0 T (        out[int\(width / 2\)]  = bar) N
0 T (        out[place\(pos\(0.5\)\)] = star) N
0 T () N
0 T (        return ''.join\(out\) +  "," +  pretty\(what\)) N
(320) # () N
0 T (""") N
0 T () N
0 T (WARNING: the call to _sorted_ in _report\(\)_ makes this code) N
0 T (a candidate for a massive CPU suck \(it is always sorting newly arrived data\).) N
(325) # (So distinguish between _adding_ things to a log in the _last_ era and ) N
0 T (using that information in the _next_ era \(so the log from the last era) N
0 T (    is staple in the current\).) N
0 T () N
0 T (### Sym) N
(330) # () N
0 T (A _Sym_ is a _Log_ for non-numerics.) N
0 T () N
0 T (+ Tracks frequency counts for symbols, and the most common symbol \(the _mode_\);) N
0 T (+ Reports the entropy of the space \(a measure of diversity: lower values mean fe) N
0 T (wer rarer symbols\);) N
(335) # (+ Generated symbols from the log by returning symbols at the same probability of) N
0 T ( the frequency counts \(see _ish\(\)_\).) N
0 T () N
0 T (""") N
0 T (class SymbolLog\(Log\):) N
0 T () N
(340) # (    @property) N
0 T (    def valid_statistics\(self\):) N
0 T (        return self._counts is None) N
0 T () N
0 T (    def _invalidate_statistics\(self\):) N
(345) # (        # `_counts is None` => invalidation of calculated statistics) N
0 T (        # _mode would be a bad idea: what's the 'null' equivalent,) N
0 T (        # when None is a valid index into _counts?) N
0 T (        self._counts = None) N
0 T () N
(350) # (    def _prepare_data\(self\):) N
("csc710sbse: hw4: Witschey") (Page 5/6) (Oct 06, 14 16:53) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        counts = {}) p n
0 T (        mode = None) N
0 T (        mode_count = 0) N
0 T () N
(355) # (        for x in self._cache:) N
0 T (            c = counts[x] = counts.get\(x, 0\) + 1) N
0 T (            if c > mode_count:) N
0 T (                mode = x) N
0 T () N
(360) # (        self._counts, self._mode = counts, mode) N
0 T (        return self._counts, self._mode) N
0 T () N
0 T (    @statistic) N
0 T (    def counts\(self\):) N
(365) # (        return self._counts) N
0 T () N
0 T (    @statistic) N
0 T (    def mode\(self\):) N
0 T (        return self._mode) N
(370) # () N
0 T (    @statistic) N
0 T (    def distribution\(self\):) N
0 T (        return {k: v / len\(self._cache\) for k, v in self.counts\(\).items\(\)}) N
0 T () N
(375) # (    def generate_report\(self\):) N
0 T (        return memo\() N
0 T (            distribution = self.distribution\(\),) N
0 T (            entropy      = self.entropy\(\),) N
0 T (            mode         = self.mode\(\)\)) N
(380) # () N
0 T (    @statistic) N
0 T (    def ish\(self\):) N
0 T (        tmp = 0) N
0 T (        threshold = random.random\(\)) N
(385) # (        for k, v in self.distribution\(\).items\(\):) N
0 T (            tmp += v) N
0 T (            if tmp >= threshold:) N
0 T (                return k) N
0 T (        # this shouldn't happen, but just in case...) N
(390) # (        return random.choice\(self._cache\)) N
0 T () N
0 T (    @statistic) N
0 T (    def entropy\(self,e=0\):) N
0 T (        n = len\(self._cache\)) N
(395) # (        for k, v in self.counts\(\).items\(\):) N
0 T (            p = v / n) N
0 T (            # TODO: understand this equation better) N
0 T (            e -= p * math.log\(p, 2\) if p else 0) N
0 T (        return e) N
("csc710sbse: hw4: Witschey") (Page 6/6) (Oct 06, 14 16:53) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/log.py) (3/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from independent_variable import IndependentVariable; del independent_variable) p n
0 T (from schaffer import Schaffer; del schaffer) N
0 T (from kursawe import Kursawe; del kursawe) N
0 T (from fonseca import Fonseca; del fonseca) N
(5) # (from zdt1 import ZDT1; del zdt1) N
0 T (from zdt3 import ZDT3; del zdt3) N
0 T (from viennet3 import Viennet3; del viennet3) N
0 T () N
0 T (del model) N
("csc710sbse: hw4: Witschey") (Page 1/1) (Oct 06, 14 15:33) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (class Model\(object\):) N
(5) # (    def __init__\(self, independents=None, dependents=None,) N
0 T (        energy_min=None, energy_max=None, enforce_energy_constraints=False\):) N
0 T (        if independents is None or dependents is None:) N
0 T (            raise ValueError) N
0 T () N
(10) # (        self.xs = independents) N
0 T (        self.ys = dependents) N
0 T (        self.energy_max = energy_max) N
0 T (        self.energy_min = energy_min) N
0 T (        self.enforce_energy_constraints = enforce_energy_constraints) N
(15) # () N
0 T (    def normalize\(self, x\):) N
0 T (        n = x - self.energy_min) N
0 T (        d = self.energy_max - self.energy_min) N
0 T (        try:) N
(20) # (            return n / d) N
0 T (        except ZeroDivisionError:) N
0 T (            return 0.5) N
0 T () N
0 T (    def random_input_vector\(self\):) N
(25) # (        return tuple\(x\(\) for x in self.xs\)) N
0 T () N
0 T (    def __call__\(self, v, norm=False\):) N
0 T (        energy_vector = tuple\(y\(v\) for y in self.ys\)) N
0 T (        energy_total = sum\(energy_vector\)) N
(30) # () N
0 T (        if self.enforce_energy_constraints:) N
0 T (            energy_errmsg ='current energy {} not in range [{}, {}]'.format\() N
0 T (                energy_total, self.energy_min, self.energy_max\)) N
0 T () N
(35) # (        if self.energy_min is None or self.energy_min > energy_total:) N
0 T (            if self.enforce_energy_constraints:) N
0 T (                raise ValueError\(energy_errmsg\)) N
0 T (            self.energy_min = energy_total) N
0 T () N
(40) # (        if self.energy_max is None or energy_total > self.energy_max:) N
0 T (            if self.enforce_energy_constraints:) N
0 T (                raise ValueError\(energy_errmsg\)) N
0 T (            self.energy_max = energy_total) N
0 T () N
(45) # (        return energy_vector) N
0 T () N
0 T (    def energy\(self, energy_vector\):) N
0 T (        return sum\(energy_vector\)) N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 30, 14 12:27) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/__init__.py, witschey/models/model.py) (4/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (import random) N
(5) # () N
0 T (class IndependentVariable\(object\):) N
0 T (    def __init__\(self, min=None, max=None, type=float\):) N
0 T (        self.min = min) N
0 T (        self.max = max) N
(10) # (        self.type = type) N
0 T () N
0 T (    def __call__\(self\):) N
0 T (        if self.type == float:) N
0 T (            f = random.uniform) N
(15) # (        elif self.type == int:) N
0 T (            f = random.randint) N
0 T () N
0 T (        return f\(self.min, self.max\)) N
0 T () N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 17, 14 21:54) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV) N
0 T (from witschey.base import memo_sqrt) N
(10) # () N
0 T (class Fonseca\(Model\):) N
0 T (    def __init__\(self, ivs=3\):) N
0 T (        ivs = tuple\(IV\(min=-4, max=4\) for _ in xrange\(ivs - 1\)\)) N
0 T () N
(15) # (        def f1\(xs\):) N
0 T (            e = sum\(\(x - \(1 / memo_sqrt\(i+1\)\)\) ** 2 for i, x in enumerate\(xs\)\)) N
0 T (            return 1 - math.exp\(-e\)) N
0 T () N
0 T (        def f2\(xs\):) N
(20) # (            e = sum\(\(x + \(1 / memo_sqrt\(i+1\)\)\) ** 2 for i, x in enumerate\(xs\)\)) N
0 T (            return 1 - math.exp\(-e\)) N
0 T () N
0 T (        super\(Fonseca, self\).__init__\(independents=ivs, dependents=\(f1, f2\)\)) N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 22, 14 23:27) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/independent_variable.py, witschey/models/fonseca.py) (5/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV) N
0 T () N
(10) # (class Kursawe\(Model\):) N
0 T (    def __init__\(self, ivs=3, a=0.8, b=3\):) N
0 T (        ivs = tuple\(IV\(min=-5, max=5\) for _ in xrange\(ivs - 1\)\)) N
0 T (        self.a = a) N
0 T (        self.b = b) N
(15) # () N
0 T (        def f1\(xs\):) N
0 T (            rv = 0) N
0 T (            for i in xrange\(len\(xs\) - 1\):) N
0 T (                exponent = \(-0.2\) * math.sqrt\(xs[i] ** 2 + xs[i+1] ** 2\)) N
(20) # (                rv += -10 * math.exp\(exponent\)) N
0 T (            return rv) N
0 T () N
0 T (        def f2\(xs\):) N
0 T (            f = lambda x: \(math.fabs\(x\)**self.a\) + \(5 * math.sin\(x\)**self.b\)) N
(25) # (            return sum\(f\(x\) for x in xs\)) N
0 T () N
0 T (        super\(Kursawe, self\).__init__\(independents=ivs, dependents=\(f1, f2\)\)) N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 22, 14 23:13) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from model import Model) N
(5) # (from independent_variable import IndependentVariable as IV) N
0 T () N
0 T (class Schaffer\(Model\):) N
0 T (    def __init__\(self, ivs=1\):) N
0 T (        ivs = tuple\(IV\(min=-10^5, max=10^5\) for _ in xrange\(ivs\)\)) N
(10) # (        # we use def instead of lambdas so the functions keep their __name__s) N
0 T (        def f1\(xs\):) N
0 T (            return sum\(x ** 2 for x in xs\)) N
0 T (        def f2\(xs\):) N
0 T (            return sum\(\(x - 2\) ** 2 for x in xs\)) N
(15) # () N
0 T (        super\(Schaffer, self\).__init__\() N
0 T (            independents=ivs,dependents=\(f1, f2\)\)) N
0 T () N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 22, 14 23:09) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/kursawe.py, witschey/models/schaffer.py) (6/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV) N
0 T () N
(10) # (class Viennet3\(Model\):) N
0 T () N
0 T (    def __init__\(self\):) N
0 T () N
0 T (        def f1\(xs\):) N
(15) # (            x_1sq = xs[0] ** 2) N
0 T (            x_2sq = xs[1] ** 2) N
0 T (            a = 0.5 * x_1sq) N
0 T (            b = math.sin\(x_1sq + x_2sq\)) N
0 T (            return a + x_2sq + b) N
(20) # () N
0 T (        def f2\(xs\):) N
0 T (            x_1 = xs[0]) N
0 T (            x_2 = xs[1]) N
0 T () N
(25) # (            a = \(\(3 * x_1 - 2 * x_2 + 4\) ** 2\) / 8) N
0 T (            b = \(\(x_1 + x_2 + 1\) ** 2\) / 27) N
0 T () N
0 T (            return a + b + 15) N
0 T () N
(30) # (        def f3\(xs\):) N
0 T (            x_1sq = xs[0] ** 2) N
0 T (            x_2sq = xs[1] ** 2) N
0 T () N
0 T (            a = 1 / \(x_1sq + x_2sq + 1\)) N
(35) # (            b = 1.1 * math.exp\(-x_1sq - x_2sq\)) N
0 T () N
0 T (            return a - b) N
0 T () N
0 T (        ivs = \(IV\(min=-3, max=3\), IV\(min=-3, max=3\)\)) N
(40) # () N
0 T (        super\(Viennet3, self\).__init__\() N
0 T (            independents=ivs, dependents=\(f1, f2, f3\)\)) N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 22, 14 23:13) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV) N
0 T () N
(10) # (class ZDT1\(Model\):) N
0 T (    def __init__\(self, ivs=30\):) N
0 T () N
0 T (        def g\(xs\):) N
0 T (            return 1 + 9 * sum\(xs[1:]\) / \(len\(xs\) - 1\)) N
(15) # () N
0 T (        def f1\(xs\):) N
0 T (            return xs[0]) N
0 T () N
0 T (        def f2\(xs\):) N
(20) # (            gxs = g\(xs\)) N
0 T (            return gxs * \(1 - math.sqrt\(xs[0] / gxs\)\)) N
0 T () N
0 T (        ivs = tuple\(IV\(min=0, max=1\) for _ in xrange\(30\)\)) N
0 T (        super\(ZDT1, self\).__init__\(independents=ivs, dependents=\(f1, f2, g\)\)) N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 22, 14 23:13) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/viennet3.py, witschey/models/zdt1.py) (7/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # () N
0 T (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV) N
(10) # (from witschey.base import memo_sqrt) N
0 T () N
0 T () N
0 T (class ZDT3\(Model\):) N
0 T () N
(15) # (    def __init__\(self, ivs=30\):) N
0 T () N
0 T (        def g\(xs\):) N
0 T (            return 1 + 9 * sum\(xs[1:]\) / \(len\(xs\) - 1\)) N
0 T () N
(20) # (        def f1\(xs\):) N
0 T (            return xs[0]) N
0 T () N
0 T (        def f2\(xs\):) N
0 T (            gxs = g\(xs\)) N
(25) # (            a = 1 - memo_sqrt\(xs[0] / gxs\) - \(xs[0] / gxs\)) N
0 T (            a *= math.sin\(10 * math.pi * xs[0]\)) N
0 T (            return gxs * a) N
0 T () N
0 T (        ivs = tuple\(IV\(min=0, max=1\) for _ in xrange\(30\)\)) N
(30) # () N
0 T (        super\(ZDT3, self\).__init__\(independents=ivs, dependents=\(f1, f2, g\)\)) N
0 T () N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 22, 14 23:12) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from simulated_annealer import SimulatedAnnealer ; del simulated_annealer) p n
0 T (from maxwalksat import MaxWalkSat ; del maxwalksat) N
0 T () N
0 T (del searcher) N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 26, 14 21:59) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/zdt3.py, witschey/searchers/__init__.py) (8/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, unicode_literals) p n
0 T () N
0 T (from witschey.base import memo, The) N
0 T () N
(5) # (from datetime import datetime) N
0 T () N
0 T (class Searcher\(object\):) N
0 T () N
0 T (    def __new__\(cls, *args, **kwargs\):) N
(10) # (        # construct our object) N
0 T (        future_self = super\(Searcher, cls\).__new__\(cls, *args, **kwargs\)) N
0 T () N
0 T (        name = cls.__name__) N
0 T (        # initialize a dict with searcher's name) N
(15) # (        # and the initialization time) N
0 T (        d = dict\(searcher=name, initialized=datetime.now\(\)\)) N
0 T () N
0 T (        # if there are global options for this class or its bases in The) N
0 T (        for k in [name] + [k.__name__ for k in cls.__bases__]:) N
(20) # (            if hasattr\(The, k\):) N
0 T (                # add them to the dict) N
0 T (                d.update\(getattr\(The, k\).__dict__\)) N
0 T () N
0 T (        # then, add the kwargs to the constructor call to the dict.) N
(25) # (        # NB: this happens after adding options from The, so ) N
0 T (        #     call-specific options override the globals) N
0 T (        d.update\(kwargs\)) N
0 T () N
0 T (        # set our spec with the contents of the dict) N
(30) # (        future_self.spec = memo\(**d\)) N
0 T () N
0 T (        return future_self) N
0 T () N
0 T (    def __init__\(self, model, *args, **kw\):) N
(35) # (        self.model = model) N
0 T () N
0 T (    def run\(*args, **kwargs\):) N
0 T (        raise NotImplementedError\(\)) N
("csc710sbse: hw4: Witschey") (Page 1/1) (Sep 30, 14 1:35) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division) p n
0 T () N
0 T (import random) N
0 T (import numpy as np) N
(5) # (from collections import defaultdict) N
0 T () N
0 T (from searcher import Searcher) N
0 T (from witschey.base import memo, tuple_replace) N
0 T (from witschey.log import NumberLog) N
(10) # () N
0 T (class MaxWalkSat\(Searcher\):) N
0 T () N
0 T (    def __init__\(self, model, *args, **kw\):) N
0 T (        super\(MaxWalkSat, self\).__init__\(model=model, *args, **kw\)) N
(15) # () N
0 T (    def local_search_inputs\(self, bottom, top, n=10\):) N
0 T (        chunk_length = \(top - bottom\) / n) N
0 T () N
0 T (        for a in np.arange\(bottom, top, chunk_length\):) N
(20) # (            yield random.uniform\(a, a + chunk_length\)) N
0 T () N
0 T () N
0 T (    def run\(self, text_report=True\):) N
0 T (        rv = memo\(report=''\)) N
(25) # () N
0 T (        log_eras = self.spec.log_eras or self.spec.terminate_early) N
0 T (        self.lives = 4) N
0 T () N
0 T (        if log_eras:) N
(30) # (            rv.era_logs_by_objective = {f.__name__: defaultdict\(NumberLog\)) N
0 T (                for f in self.model.ys}) N
0 T (            rv.era_logs_best_energy = defaultdict\(NumberLog\)) N
0 T () N
0 T (        def report\(s\):) N
(35) # (            if text_report:) N
0 T (                rv.report += s) N
0 T () N
0 T (        self.terminate = False) N
0 T (        def end_era\(evals, era_length, log_value\):) N
(40) # (            report\('\\n{: .2}'.format\(log_value\) + ' '\)) N
0 T () N
0 T (            self.lives -= 1) N
0 T (            eras = evals // era_length) N
0 T () N
(45) # () N
0 T (            for logs in rv.era_logs_by_objective.values\(\):) N
0 T (                if eras not in logs: break) N
0 T (                if len\(logs.keys\(\)\) < 2: break) N
0 T () N
(50) # (                prev_log = logs[logs.keys\(\).index\(eras\) - 1]) N
0 T (                if logs[eras].better\(prev_log\): self.lives += 1) N
0 T () N
0 T (            if self.lives <= 0: self.terminate = True) N
0 T () N
(55) # () N
0 T (        def log_era\(evals, era_length, dependents_outputs\):) N
0 T (            era = evals // era_length) N
0 T (            for f, v in dependents_outputs:) N
0 T (                rv.era_logs_by_objective[f.__name__][era] += v) N
(60) # (                rv.era_logs_best_energy[era] += rv.best) N
0 T () N
0 T () N
0 T (        init = self.model.random_input_vector\(\)) N
0 T (        solution = init) N
(65) # (        state = solution) N
0 T (        current_energy = self.model.energy\(self.model\(state\)\)) N
0 T (        rv.best = current_energy) N
0 T (        evals = 0) N
0 T () N
(70) # (        report\('{: .2}'.format\(rv.best\) + ' '\)) N
0 T () N
0 T () N
0 T (        while evals < self.spec.iterations:) N
("csc710sbse: hw4: Witschey") (Page 1/2) (Oct 06, 14 16:21) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/searchers/searcher.py, witschey/searchers/maxwalksat.py) (9/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2,1) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (            if self.terminate: break) p n
(75) # () N
0 T (            for j in range\(20\):) N
0 T (                if evals > self.spec.iterations or self.terminate:) N
0 T (                    break) N
0 T () N
(80) # (                dimension = random.randint\(0, len\(state\) - 1\)) N
0 T (                if self.spec.p_mutation > random.random\(\):) N
0 T (                    state = tuple_replace\(state,) N
0 T (                        dimension, self.model.xs[dimension]\(\)\)) N
0 T () N
(85) # (                    current_energy = self.model.energy\(self.model\(state\)\)) N
0 T () N
0 T (                    if current_energy < rv.best:) N
0 T (                        solution = state) N
0 T (                        rv.best = current_energy) N
(90) # (                        report\('+'\)) N
0 T (                    else:) N
0 T (                        report\('.'\)) N
0 T () N
0 T (                    evals += 1) N
(95) # () N
0 T () N
0 T (                    if evals % self.spec.era_length == 0:) N
0 T (                        end_era\(evals, self.spec.era_length, rv.best\)) N
0 T () N
(100) # (                else:) N
0 T (                    for j in self.local_search_inputs\() N
0 T (                        self.model.xs[dimension].min,) N
0 T (                        self.model.xs[dimension].max) N
0 T (                        \):) N
(105) # (                        if self.terminate: break) N
0 T () N
0 T (                        state = tuple_replace\(state,) N
0 T (                            dimension, self.model.xs[dimension]\(\)\)) N
0 T () N
(110) # (                        current_energy = self.model\(state\)) N
0 T () N
0 T (                        if current_energy < rv.best:) N
0 T (                            solution = state) N
0 T (                            rv.best = current_energy) N
(115) # (                            report\('|'\)) N
0 T (                        else:) N
0 T (                            report\('.'\)) N
0 T () N
0 T (                        evals += 1) N
(120) # (                        if evals % self.spec.era_length == 0:) N
0 T (                            end_era\(evals, self.spec.era_length, rv.best\)) N
0 T (                if log_eras:) N
0 T (                    log_era\(evals, self.spec.era_length,) N
0 T (                        zip\(self.model.ys, self.model\(solution\)\)\)) N
(125) # () N
0 T (        rv.evaluations = evals) N
0 T (        return rv) N
("csc710sbse: hw4: Witschey") (Page 2/2) (Oct 06, 14 16:21) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division) p n
0 T () N
0 T (import random) N
0 T (import math) N
(5) # (from collections import defaultdict) N
0 T () N
0 T (from searcher import Searcher) N
0 T (from witschey.base import memo) N
0 T (from witschey.log import NumberLog) N
(10) # () N
0 T () N
0 T (class SimulatedAnnealer\(Searcher\):) N
0 T (    def __init__\(self, model, *args, **kw\):) N
0 T (        super\(SimulatedAnnealer, self\).__init__\(model=model, *args, **kw\)) N
(15) # () N
0 T (    def run\(self, text_report=True\):) N
0 T (        rv = memo\(report=''\)) N
0 T (        if self.spec.log_eras:) N
0 T (            rv.era_logs_by_objective = {) N
(20) # (                f.__name__: defaultdict\(NumberLog\)) N
0 T (                for f in self.model.ys) N
0 T (            }) N
0 T (            rv.era_logs_best_energy = defaultdict\(NumberLog\)) N
0 T (        def report_append\(s\):) N
(25) # (            if text_report:) N
0 T (                rv.report += s) N
0 T () N
0 T (        init = self.model.random_input_vector\(\)) N
0 T (        solution = init) N
(30) # (        state = solution) N
0 T (        rv.best = self.model.energy\(self.model\(solution\)\)) N
0 T () N
0 T (        def p\(old, new, temp\):) N
0 T (            """) N
(35) # (            sets the threshold we compare to to decide whether to jump) N
0 T () N
0 T (            returns e^-\(\(new-old\)/temp\)) N
0 T (            """) N
0 T (            numerator = new - old) N
(40) # () N
0 T (            if not 0 <= numerator <= 1:) N
0 T (                numerator = old - new) N
0 T (            try:) N
0 T (                exponent = numerator / temp) N
(45) # (            except ZeroDivisionError:) N
0 T (                return 0) N
0 T (            rv = math.exp\(-exponent\)) N
0 T (            if rv > 1:) N
0 T (                raise ValueError\('p returning greater than one',) N
(50) # (                    rv, old, new, temp\)) N
0 T (            return rv) N
0 T () N
0 T (        report_append\('{: .2}'.format\(rv.best\) + ' '\)) N
0 T (        self.lives = 4) N
(55) # () N
0 T (        for k in range\(self.spec.iterations\):) N
0 T (            if self.lives <= 0: break) N
0 T (            neighbor_candidate = self.model.random_input_vector\(\)) N
0 T (            neighbor = tuple\(neighbor_candidate[i]) N
(60) # (                if random.random\(\) < self.spec.p_mutation else v) N
0 T (                for i, v in enumerate\(state\)\)) N
0 T () N
0 T (            rv.best = self.model.energy\(self.model\(solution\)\)) N
0 T (            neighbor_energy = self.model.energy\(self.model\(neighbor\)\)) N
(65) # (            current_energy  = self.model.energy\(self.model\(state\)\)) N
0 T () N
0 T () N
0 T (            if neighbor_energy < rv.best:) N
0 T (                solution = neighbor) N
(70) # (                rv.best = neighbor_energy) N
0 T (                report_append\('!'\)) N
0 T () N
0 T (            if neighbor_energy < current_energy:) N
("csc710sbse: hw4: Witschey") (Page 1/2) (Oct 06, 14 16:27) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/searchers/maxwalksat.py, witschey/searchers/simulated_annealer.py) (10/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (                state = neighbor) p n
(75) # (                report_append\('+'\)) N
0 T (            else:) N
0 T (                good_idea = p\() N
0 T (                    self.model.normalize\(current_energy\),) N
0 T (                    self.model.normalize\(neighbor_energy\),) N
(80) # (                    k / self.spec.iterations\)) N
0 T (                if good_idea < random.random\(\):) N
0 T (                    state = neighbor) N
0 T (                    report_append\('?'\)) N
0 T () N
(85) # (            report_append\('.'\)) N
0 T () N
0 T (            if self.spec.log_eras or self.spec.terminate_early:) N
0 T (                era = k // self.spec.era_length) N
0 T (                for f, v in zip\(self.model.ys, self.model\(solution\)\):) N
(90) # (                    rv.era_logs_best_energy[era] += rv.best) N
0 T (                    rv.era_logs_by_objective[f.__name__][era] += v) N
0 T () N
0 T (            if k % self.spec.era_length == 0 and k != 0:) N
0 T (                report_append\('\\n' + '{: .2}'.format\(rv.best\) + ' '\)) N
(95) # () N
0 T (                self.lives -= 1) N
0 T (                eras = k // self.spec.era_length) N
0 T () N
0 T (                for logs in rv.era_logs_by_objective.values\(\):) N
(100) # (                    if eras not in logs: break) N
0 T (                    if len\(logs.keys\(\)\) < 2: break) N
0 T () N
0 T (                    prev_log = logs[logs.keys\(\).index\(eras\) - 1]) N
0 T (                    if logs[eras].better\(prev_log\): self.lives += 1) N
(105) # () N
0 T (        return rv) N
0 T () N
("csc710sbse: hw4: Witschey") (Page 2/2) (Oct 06, 14 16:27) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/searchers/simulated_annealer.py) (11/11) (Monday October 06, 2014) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
