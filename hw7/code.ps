%!PS-Adobe-3.0
%%Title: base.py, basic_stats.py, log.py, numberlog.py, __init__.py, model.py, independent_variable.py, dtlz7.py, fonseca.py, kursawe.py
%%For: Jim Witschey
%%Creator: a2ps version 4.14
%%CreationDate: Thu Nov  6 13:27:29 2014
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 18
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.060185 def
/cw 4.236111 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 86.400000 mul
def
/ph
   520.335631 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, print_function, unicode_literals) p n
0 T () N
0 T (import random) N
0 T (import functools) N
(5) # (import math) N
0 T (import itertools) N
0 T (import collections) N
0 T () N
0 T () N
(10) # (def pretty_input\(t\):) N
0 T (    float_format = lambda x: '{:.2f}'.format\(x\)) N
0 T (    str_tuple = tuple\(float_format\(x\) for x in t\)) N
0 T (    return ', '.join\(s for s in str_tuple\)) N
0 T () N
(15) # () N
0 T (def pairs\(xs\):) N
0 T (    # from https://docs.python.org/2/library/itertools.html) N
0 T (    a, b = itertools.tee\(xs\)) N
0 T (    next\(b, None\)) N
(20) # (    for p in itertools.izip\(a, b\):) N
0 T (        yield p) N
0 T () N
0 T () N
0 T (class memo\(object\):  # noqa -- TODO: rethink this name) N
(25) # (    '''adapted from https://github.com/timm/sbse14/wiki/basepy''') N
0 T () N
0 T (    def __init__\(self, **kwargs\):) N
0 T (        self.__dict__.update\(kwargs\)) N
0 T () N
(30) # (    def to_str\(self, depth=0, indent=4, infix=': ', sep=', ', d=None\):) N
0 T (        return '{' + self._to_str\() N
0 T (            depth=depth + 1,) N
0 T (            indent=indent,) N
0 T (            infix=infix,) N
(35) # (            sep=sep,) N
0 T (            d=self.__dict__ if d is None else d\) + '}') N
0 T () N
0 T (    def _to_str\(self, depth, indent, infix, sep, d\):) N
0 T (        after, before = [], []) N
(40) # (        rv = '') N
0 T (        for k in sorted\([s for s in d.keys\(\) if s[0] != '_']\):) N
0 T (            val = d[k]) N
0 T (            if isinstance\(val, memo\) or type\(val\) == dict:) N
0 T (                after.append\(k\)) N
(45) # (            else:) N
0 T (                before.append\('{}{}{}'.format\(k, infix, repr\(val\)\)\)) N
0 T (        if before:) N
0 T (            rv += '\\n' + ' ' * depth * indent) N
0 T (            rv += sep.join\(before\)) N
(50) # (        rv += '\\n') N
0 T () N
0 T (        for k in after:) N
0 T (            rv += ''.join\([' ' * depth * indent, k, infix, '{']\)) N
0 T (            k = d[k]) N
(55) # (            k = k if type\(k\) == dict else k.__dict__) N
0 T (            rv += ''.join\([self._to_str\(depth=depth+1, indent=indent,) N
0 T (                           infix=infix, sep=sep, d=k\),) N
0 T (                           ' ' * depth * indent,) N
0 T (                           '}\\n']\)) N
(60) # () N
0 T (        return rv) N
0 T () N
0 T () N
0 T (def memoize\(f\):) N
(65) # (    'memoizer for single-arg functions') N
0 T (    d = {}) N
0 T () N
0 T (    @functools.wraps\(f\)) N
0 T (    def wrapper\(x\):) N
(70) # (        try:) N
0 T (            return d[x]) N
0 T (        except KeyError:) N
0 T (            d[x] = f\(x\)) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Oct 26, 14 16:08) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (            return d[x]) p n
(75) # () N
0 T (    return wrapper) N
0 T () N
0 T () N
0 T (@memoize) N
(80) # (def memo_sqrt\(x\):) N
0 T (    return math.sqrt\(x\)) N
0 T () N
0 T () N
0 T (def tuple_replace\(t, replace_at, value\):) N
(85) # (    return tuple\(value if i == replace_at else v for i, v in enumerate\(t\)\)) N
0 T () N
0 T () N
0 T (def random_index\(x\):) N
0 T (    ''') N
(90) # (    Given a dict, list, tuple, or a subclass of one of these, return a random) N
0 T (    valid key for it.) N
0 T (    ''') N
0 T (    if isinstance\(x, dict\) or issubclass\(x.__class__, dict\):) N
0 T (        return random.choice\(x.keys\)) N
(95) # (    if isinstance\(x, \(list, tuple\)\) or issubclass\(x.__class__, \(list, tuple\)\):) N
0 T (        return random.randint\(0, len\(x\) - 1\)) N
0 T (    raise ValueError\('{} is not a dict, list, or tuple'.format\(x\)\)) N
0 T () N
0 T () N
(100) # (class StringBuilder\(object\):) N
0 T (    def __init__\(self, *args\):) N
0 T (        self._s = ''.join\(args\)) N
0 T (        self._next = []) N
0 T () N
(105) # (    def append\(self, arg\):) N
0 T (        'recurse through iterables in args, adding all strings to _next ') N
0 T (        'raises TypeError if it finds a non-Iterable non-string') N
0 T (        if isinstance\(arg, basestring\):) N
0 T (            self._next.append\(arg\)) N
(110) # (        elif isinstance\(arg, collections.Iterable\):) N
0 T (            map\(self.append, arg\)) N
0 T (        else:) N
0 T (            raise TypeError\('{} not a string or iterable'.format\(arg\)\)) N
0 T () N
(115) # (    def __iadd__\(self, arg\):) N
0 T (        self.append\(arg\)) N
0 T (        return self) N
0 T () N
0 T (    def as_str\(self\):) N
(120) # (        'build and cache _s if necessary, then return it.') N
0 T (        if self._next:) N
0 T (            self._s += ''.join\(self._next\)) N
0 T (            self._next = []) N
0 T (        return self._s) N
(125) # () N
0 T (    def __repr__\(self\):) N
0 T (        return "{}\('{}'\)".format\(self.__class__.__name__, self.as_str\(\)\)) N
0 T () N
0 T () N
(130) # (class NullObject\(object\):) N
0 T (    __slots__ = \(\)) N
0 T () N
0 T (    def __init__\(self, *args, **kw\):) N
0 T (        return None) N
(135) # () N
0 T (    def _return_self\(self, *name, **kw\):) N
0 T (        return self) N
0 T () N
0 T (    __getattribute__ = _return_self) N
(140) # (    __setattr__ = _return_self) N
0 T (    __iadd__ = _return_self) N
0 T (    __call__ = _return_self) N
0 T () N
0 T (    def __bool__\(self, *args, **kw\):) N
(145) # (        return False) N
0 T (    __nonzero__ = __bool__) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Oct 26, 14 16:08) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/base.py) (1/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, print_function) p n
0 T () N
0 T (import itertools) N
0 T (import base) N
(5) # () N
0 T () N
0 T (def median\(xs, is_sorted=False\):) N
0 T (    """) N
0 T (    Return the median of the integer-indexed object passed in. To save sorting) N
(10) # (    time, the client can pass in is_sorted=True to skip the sorting step.) N
0 T (    """) N
0 T (    # implementation from http://stackoverflow.com/a/10482734/3408454) N
0 T (    if not is_sorted:) N
0 T (        xs = sorted\(xs\)) N
(15) # (    n = len\(xs\)) N
0 T (    return xs[n // 2] if n % 2 else \(xs[n // 2] + xs[n // 2 - 1]\) / 2) N
0 T () N
0 T () N
0 T (def mean\(xs\):) N
(20) # (    "Returns the mean of the iterable argument.") N
0 T (    return sum\(xs\) / len\(xs\)) N
0 T () N
0 T () N
0 T (def iqr\(xs\):) N
(25) # (    n = len\(xs\)) N
0 T (    return xs[int\(n * .75\)] - xs[int\(n * .25\)]) N
0 T () N
0 T () N
0 T (_mean = mean  # `mean` alias for use by standard_deviation, which shadows it) N
(30) # () N
0 T () N
0 T (def standard_deviation\(xs, mean=None\):) N
0 T (    if mean is None:) N
0 T (        mean = _mean\(xs\)) N
(35) # (    return base.memo_sqrt\(sum\(\(x - mean\) ** 2 for x in xs\)\)) N
0 T () N
0 T () N
0 T (def norm\(x, a, b\):) N
0 T (    lo, hi = min\(a, b\), max\(a, b\)) N
(40) # (    try:) N
0 T (        return \(x - lo\) / \(hi - lo\)) N
0 T (    except ZeroDivisionError:) N
0 T (        return .5) N
0 T () N
(45) # () N
0 T (def value_at_proportion\(p, xs\):) N
0 T (    return xs[int\(round\(len\(xs\) - 1\) * p\)]) N
0 T () N
0 T () N
(50) # (def percentile\(x, xs, is_sorted=False\):) N
0 T (    if not is_sorted:) N
0 T (        xs = sorted\(xs\)) N
0 T (    before = len\(tuple\(itertools.takewhile\(lambda y: y < x, xs\)\)\)) N
0 T (    return before / len\(xs\)) N
(55) # () N
0 T () N
0 T (def xtile\(xs, lo=0, hi=0.001, width=50,) N
0 T (          chops=[0.1, 0.3, 0.5, 0.7, 0.9], marks=["-", " ", " ", "-", " "],) N
0 T (          bar="|", star="*", show=" {: >6.2f}",) N
(60) # (          as_list=False\):) N
0 T (    """Take an iterable of numbers and present them as a horizontal xtile) N
0 T (    ascii chart. The default is a contracted quintile showing the 10th, 30th,) N
0 T (    50th, 70th, and 90th percentiles. These breaks can be customized with the) N
0 T (    chops parameter.) N
(65) # (    """) N
0 T () N
0 T (    xs = sorted\(xs\)) N
0 T () N
0 T (    lo, hi = min\(lo, xs[0]\), max\(hi, xs[-1]\)) N
(70) # (    if hi == lo:) N
0 T (        hi += .001  # ugh) N
0 T () N
0 T (    out = [' '] * width) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Nov 05, 14 15:22) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T () p n
(75) # (    out_index_for_value = lambda x: min\(width-1,) N
0 T (                                        int\(len\(out\) * norm\(x, lo, hi\)\)\)) N
0 T () N
0 T (    values_at_chops = tuple\(xs[int\(len\(xs\) * p\)] for p in chops\)) N
0 T (    where = [out_index_for_value\(n\) for n in values_at_chops]) N
(80) # () N
0 T (    for one, two in base.pairs\(where\):) N
0 T (        for i in range\(one, two\):) N
0 T (            out[i] = marks[0]) N
0 T (        marks = marks[1:]) N
(85) # () N
0 T (    out[int\(width / 2\)] = bar) N
0 T (    out[out_index_for_value\(xs[int\(len\(xs\) * 0.5\)]\)] = star) N
0 T () N
0 T (    if as_list:) N
(90) # (        rv = ['\(' + ''.join\(out\) + "\)"]) N
0 T (        rv.extend\(show.format\(x\) for x in values_at_chops\)) N
0 T (        return rv) N
0 T () N
0 T (    return ''.join\(out\) + "," + ','.join\([show.format\(x\)) N
(95) # (                                         for x in values_at_chops]\)) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Nov 05, 14 15:22) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/basic_stats.py) (2/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, print_function) p n
0 T () N
0 T (import random) N
0 T (import functools) N
(5) # (import collections) N
0 T (import itertools) N
0 T () N
0 T (from sortedcontainers import SortedList) N
0 T () N
(10) # (from witschey import base) N
0 T () N
0 T () N
0 T (class Log\(object\):) N
0 T (    """Keep a random sample of stuff seen so far. Based on Dr. Menzies') N
(15) # (    implementation.""") N
0 T () N
0 T (    MAX_SIZE = 256) N
0 T () N
0 T (    def __init__\(self, inits=None, label=None, max_size=MAX_SIZE\):) N
(20) # (        self._cache = SortedList\(\)) N
0 T (        self._report = None) N
0 T (        self.label = label or '') N
0 T (        self._n = 0) N
0 T (        self.max_size = max_size) N
(25) # (        self._valid_statistics = False) N
0 T (        self._invalidate_statistics\(\)) N
0 T (        if inits:) N
0 T (            map\(self.__iadd__, inits\)) N
0 T () N
(30) # (    def random_index\(self\):) N
0 T (        return base.random_index\(self._cache\)) N
0 T () N
0 T (    @classmethod) N
0 T (    def wrap\(cls, x, max_size=MAX_SIZE\):) N
(35) # (        if isinstance\(x, cls\):) N
0 T (            return x) N
0 T (        return cls\(inits=x, max_size=max_size\)) N
0 T () N
0 T (    def __len__\(self\):) N
(40) # (        return len\(self._cache\)) N
0 T () N
0 T (    def extend\(self, xs\):) N
0 T (        if not isinstance\(xs, collections.Iterable\):) N
0 T (            raise TypeError\(\)) N
(45) # (        map\(self.__iadd__, xs\)) N
0 T () N
0 T (    def __iadd__\(self, x\):) N
0 T (        if x is None:) N
0 T (            return x) N
(50) # () N
0 T (        self._n += 1) N
0 T () N
0 T (        if issubclass\(x.__class__, Log\):) N
0 T (            map\(self.__iadd__, x._cache\)) N
(55) # (            return self) N
0 T () N
0 T (        changed = False) N
0 T () N
0 T (        # if cache has room, add item) N
(60) # (        if self.max_size is None or len\(self._cache\) < self.max_size:) N
0 T (            changed = True) N
0 T (            self._cache.add\(x\)) N
0 T (        # cache is full: maybe replace an old item) N
0 T (        else:) N
(65) # (            # items less likely to be replaced later in the run:) N
0 T (            # leads to uniform sample of entire run) N
0 T (            if random.random\(\) <= self.max_size / len\(self\):) N
0 T (                changed = True) N
0 T (                self._cache.remove\(random.choice\(self._cache\)\)) N
(70) # (                self._cache.add\(x\)) N
0 T () N
0 T (        if changed:) N
0 T (            self._invalidate_statistics\(\)) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Oct 29, 14 17:14) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (            self._change\(x\)) p n
(75) # () N
0 T (        return self) N
0 T () N
0 T (    def __add__\(self, x, max_size=MAX_SIZE\):) N
0 T (        inits = itertools.chain\(self._cache, x._cache\)) N
(80) # (        return self.__class__\(inits=inits, max_size=max_size\)) N
0 T () N
0 T (    def any\(self\):) N
0 T (        return random.choice\(self._cache\)) N
0 T () N
(85) # (    def report\(self\):) N
0 T (        if self._report is None:) N
0 T (            self._report = self._generate_report\(\)) N
0 T (        return self._report) N
0 T () N
(90) # (    def setup\(self\):) N
0 T (        raise NotImplementedError\(\)) N
0 T () N
0 T (    def as_list\(self\):) N
0 T (        return self._cache.as_list\(\)) N
(95) # () N
0 T (    def _invalidate_statistics\(self\):) N
0 T (        ''') N
0 T (        default implementation. if _valid_statistics is something other than) N
0 T (        a boolean, reimplement!) N
(100) # (        ''') N
0 T (        self._valid_statistics = False) N
0 T () N
0 T (    def ish\(self, *args, **kwargs\):) N
0 T (        raise NotImplementedError\(\)) N
(105) # () N
0 T (    def _change\(self, x\):) N
0 T (        ''') N
0 T (        override to add incremental updating functionality) N
0 T (        ''') N
(110) # (        pass) N
0 T () N
0 T (    def _prepare_data\(self\):) N
0 T (        s = '_prepare_data\(\) not implemented for ' + self.__class__.__name__) N
0 T (        raise NotImplementedError\(s\)) N
(115) # () N
0 T (    def __iter__\(self\):) N
0 T (        return iter\(self._cache\)) N
0 T () N
0 T (    def contents\(self\):) N
(120) # (        return self._cache.as_list\(\)) N
0 T () N
0 T () N
0 T (def statistic\(f\):) N
0 T (    ''') N
(125) # (    decorator for log functions that return statistics about contents.) N
0 T (    if _valid_statistics is False, generate valid stats before calling) N
0 T (    the wrapped function.) N
0 T (    ''') N
0 T (    @functools.wraps\(f\)) N
(130) # (    def wrapper\(*args, **kwargs\):) N
0 T (        self = args[0]) N
0 T (        if not self._valid_statistics:) N
0 T (            self._prepare_data\(\)) N
0 T (        return f\(*args, **kwargs\)) N
(135) # () N
0 T (    return wrapper) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Oct 29, 14 17:14) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/log/log.py) (3/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division) p n
0 T () N
0 T (from log import Log) N
0 T (from witschey import base) N
(5) # (from witschey import basic_stats) N
0 T () N
0 T () N
0 T (class NumberLog\(Log\):) N
0 T () N
(10) # (    def __init__\(self, *args, **kwargs\):) N
0 T (        super\(NumberLog, self\).__init__\(*args, **kwargs\)) N
0 T () N
0 T (        self._invalidate_statistics\(\)) N
0 T () N
(15) # (    @property) N
0 T (    def hi\(self\):) N
0 T (        return self._cache[-1]  # assumes SortedList implementation) N
0 T () N
0 T (    @property) N
(20) # (    def lo\(self\):) N
0 T (        return self._cache[0]  # assumes SortedList implementation) N
0 T () N
0 T (    def _invalidate_statistics\(self\):) N
0 T (        self._cached_mean, self._cached_median = None, None) N
(25) # (        self._cached_sd, self._cached_iqr = None, None) N
0 T () N
0 T (        super\(NumberLog, self\)._invalidate_statistics\(\)) N
0 T () N
0 T (    def norm\(self, x\):) N
(30) # (        "normalize the argument with respect to maximum and minimum") N
0 T (        if self.hi == self.lo:) N
0 T (            raise ValueError\('hi and lo of {} are equal'.format\(self.__name__\)\)) N
0 T (        return basic_stats.norm\(x, self.lo, self.hi\)) N
0 T () N
(35) # (    def _prepare_data\(self\):) N
0 T (        if not self._valid_statistics:) N
0 T (            pass) N
0 T (        self._valid_statistics = True) N
0 T () N
(40) # (    def _generate_report\(self\):) N
0 T (        return base.memo\(median=self.median\(\), iqr=self.iqr\(\),) N
0 T (                         lo=self.lo, hi=self.hi\)) N
0 T () N
0 T (    def ish\(self, f=0.1\):) N
(45) # (        """return a num likely to be similar to/representative of) N
0 T (        nums in the distribution""") N
0 T (        return self.any\(\) + f*\(self.any\(\) - self.any\(\)\)) N
0 T () N
0 T (    def median\(self\):) N
(50) # (        if self._cached_median is not None:) N
0 T (            return self._cached_median) N
0 T (        self._cached_median = basic_stats.median\(self._cache\)) N
0 T (        return self._cached_median) N
0 T () N
(55) # (    def mean\(self\):) N
0 T (        if self._cached_mean is not None:) N
0 T (            return self._cached_mean) N
0 T (        self._cached_mean = basic_stats.mean\(self._cache\)) N
0 T (        return self._cached_mean) N
(60) # () N
0 T (    def standard_deviation\(self\):) N
0 T (        if self._cached_sd is not None:) N
0 T (            return self._cached_sd) N
0 T (        self._cached_sd = basic_stats.standard_deviation\() N
(65) # (            self._cache, mean=self.mean\(\)\)) N
0 T (        return self._cached_sd) N
0 T () N
0 T (    def iqr\(self\):) N
0 T (        if self._cached_iqr is not None:) N
(70) # (            return self._cached_iqr) N
0 T (        self._cached_iqr = basic_stats.iqr\(self._cache\)) N
0 T (        return self._cached_iqr) N
0 T () N
("csc710sbse: hw7: Witschey") (Page 1/2) (Oct 29, 14 17:27) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (    def xtile\(self, *args, **kw\):) p n
(75) # (        return basic_stats.xtile\(self._cache, *args, **kw\)) N
0 T () N
0 T (    def value_at_proportion\(self, p\):) N
0 T (        return basic_stats.value_at_proportion\(p, self._cache\)) N
0 T () N
(80) # (    def better\(self, log2\):) N
0 T (        if log2 is None:) N
0 T (            return ValueError) N
0 T (        if not self._cache or not log2._cache:) N
0 T (            return False) N
(85) # (        if self.median\(\) < log2.median\(\):) N
0 T (            return True) N
0 T (        if self.iqr\(\) < log2.iqr\(\):) N
0 T (            return True) N
0 T (        return False) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Oct 29, 14 17:27) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/log/numberlog.py) (4/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from model import Model, ModelIO, ModelInputException) p n
0 T (from independent_variable import IndependentVariable) N
0 T (from schaffer import Schaffer) N
0 T (from kursawe import Kursawe) N
(5) # (from fonseca import Fonseca) N
0 T (from zdt1 import ZDT1) N
0 T (from zdt3 import ZDT3) N
0 T (from viennet3 import Viennet3) N
0 T (from dtlz7 import DTLZ7) N
(10) # (from schwefel import Schwefel) N
0 T (from osyczka import Osyczka) N
0 T () N
0 T (__all__ = [Model, IndependentVariable, ModelIO, ModelInputException,) N
0 T (           Schaffer, Kursawe, Fonseca,) N
(15) # (           ZDT1, ZDT3, Viennet3,) N
0 T (           DTLZ7, Schwefel, Osyczka]) N
("csc710sbse: hw7: Witschey") (Page 1/1) (Oct 24, 14 4:29) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, print_function) p n
0 T () N
0 T (# all adapted from Dr. Tim Menzies' model code:) N
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
(5) # () N
0 T (from abc import ABCMeta) N
0 T (from collections import namedtuple) N
0 T (from random import sample) N
0 T () N
(10) # (from witschey import basic_stats) N
0 T () N
0 T (ModelIO = namedtuple\('ModelIO', \('xs', 'ys', 'energy'\)\)) N
0 T () N
0 T () N
(15) # (class Model\(object\):) N
0 T (    # allows us to get all subclasses with __subclasses__\(\)) N
0 T (    __metaclass__ = ABCMeta) N
0 T () N
0 T (    def __init__\(self, independents=None, dependents=None,) N
(20) # (                 energy_min=None, energy_max=None\):) N
0 T (        if independents is None or dependents is None:) N
0 T (            raise ValueError) N
0 T () N
0 T (        self.xs = independents) N
(25) # (        self.ys = dependents) N
0 T (        self.energy_max = energy_max) N
0 T (        self.energy_min = energy_min) N
0 T () N
0 T (    def normalize\(self, x\):) N
(30) # (        return basic_stats.norm\(x, self.energy_max, self.energy_min\)) N
0 T () N
0 T (    def random_input_vector\(self\):) N
0 T (        return tuple\(x\(\) for x in self.xs\)) N
0 T () N
(35) # (    def __call__\(self, xs, io=False\):) N
0 T (        for i, x in enumerate\(xs\):) N
0 T (            if not self.xs[i].lo <= x <= self.xs[i].hi:) N
0 T (                raise ModelInputException) N
0 T () N
(40) # (        ys = tuple\(y\(xs\) for y in self.ys\)) N
0 T (        energy = sum\(ys\)) N
0 T () N
0 T (        if self.energy_min is None or self.energy_min > energy:) N
0 T (            self.energy_min = energy) N
(45) # () N
0 T (        if self.energy_max is None or energy > self.energy_max:) N
0 T (            self.energy_max = energy) N
0 T () N
0 T (        if io:) N
(50) # (            return ModelIO\(xs, ys, energy\)) N
0 T () N
0 T (        return ys) N
0 T () N
0 T (    def energy\(self, ys, norm=False\):) N
(55) # (        rv = sum\(ys\)) N
0 T (        return self.normalize\(rv\) if norm else rv) N
0 T () N
0 T (    def compute_model_io\(self, xs\):) N
0 T (        """) N
(60) # (        Return a ModelIO namedtuple containing the input provided as the) N
0 T (        argument, the output values for each function, and the energy of that) N
0 T (        output.) N
0 T () N
0 T (        Since this evaluates the model on its input, this method may raise a) N
(65) # (        ModelInputException.) N
0 T (        """) N
0 T (        ys = self\(xs\)) N
0 T (        return ModelIO\(xs, ys, self.energy\(ys\)\)) N
0 T () N
(70) # (    def random_model_io\(self\):) N
0 T (        """) N
0 T (        Generate a random input for this model, then run the model) N
0 T (        """) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Oct 26, 14 3:03) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/__init__.py, witschey/models/model.py) (5/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2,1) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        while True:) p n
(75) # (            try:) N
0 T (                return self.compute_model_io\(self.random_input_vector\(\)\)) N
0 T (            except ModelInputException:) N
0 T (                pass) N
0 T () N
(80) # (    def random_replace\(self, xs, n=1\):) N
0 T (        """) N
0 T (        Returns a tuple identical to xs, except in n positions, where the) N
0 T (        value has been replaced with a value randomly generated by the) N
0 T (        appropriate independent variable.) N
(85) # () N
0 T (        >>> from independent_variable import IndependentVariable as IV) N
0 T (        >>> import random) N
0 T (        >>> random.seed\(1\)) N
0 T (        >>> ivs = tuple\(IV\(0, 10\) for _ in range\(3\)\)) N
(90) # (        >>> m = Model\(independents=ivs, dependents=\(\)\)) N
0 T (        >>> m.random_replace\(\(5, 5, 5\)\)) N
0 T (        \(8.474337369372327, 5, 5\)) N
0 T (        >>> m.random_replace\(\(5, 5, 5\), 2\)) N
0 T (        \(4.954350870919409, 5, 4.494910647887381\)) N
(95) # (        """) N
0 T (        replace_indices = sample\(tuple\(range\(len\(xs\)\)\), n\)) N
0 T (        return tuple\(self.xs[i]\(\) if i in replace_indices else x) N
0 T (                     for i, x in enumerate\(xs\)\)) N
0 T () N
(100) # () N
0 T (class ModelInputException\(Exception\):) N
0 T (    pass) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Oct 26, 14 3:03) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, print_function) p n
0 T (# all adapted from Dr. Tim Menzies' model code:) N
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
(5) # (import random) N
0 T () N
0 T () N
0 T (class IndependentVariable\(object\):) N
0 T (    """) N
(10) # (    An independent variable for a model.) N
0 T () N
0 T (    >>> iv = IndependentVariable\(0, 10\)) N
0 T (    >>> iv.lo, iv.hi) N
0 T (    \(0, 10\)) N
(15) # () N
0 T (    Call an independent variable object to generating random variables within) N
0 T (    its range:) N
0 T () N
0 T (    >>> random.seed\(1\); iv\(\), iv\(\), iv\(\)) N
(20) # (    \(1.3436424411240122, 8.474337369372327, 7.6377461897661405\)) N
0 T () N
0 T (    Provides a `clip` method to return a variable clipped within the bounds) N
0 T (    of the variable:) N
0 T () N
(25) # (    >>> iv.clip\(10.5\), iv.clip\(-100\), iv.clip\(4.2\)) N
0 T (    \(10, 0, 4.2\)) N
0 T () N
0 T (    The optional third argument to __init__ specifies the type of the) N
0 T (    IndependentVariable. Valid values are `float` and `int`, and the default) N
(30) # (    is `float`.) N
0 T () N
0 T (    >>> iv = IndependentVariable\(0, 10, int\)) N
0 T (    >>> iv\(\), iv\(\), iv\(\)) N
0 T (    \(2, 5, 4\)) N
(35) # (    """) N
0 T () N
0 T (    def __init__\(self, lo, hi, gen_type=float\):) N
0 T (        self._lo = lo) N
0 T (        self._hi = hi) N
(40) # (        self._type = gen_type) N
0 T () N
0 T (        if self._type == float:) N
0 T (            self._get = random.uniform) N
0 T (        elif self._type == int:) N
(45) # (            self._get = random.randint) N
0 T () N
0 T (    def __call__\(self\):) N
0 T (        return self._get\(self.lo, self.hi\)) N
0 T () N
(50) # (    def clip\(self, x\):) N
0 T (        """) N
0 T (        Clip the input number within the bounds of the independent variable.) N
0 T (        """) N
0 T (        return max\(self.lo, min\(self.hi, x\)\)) N
(55) # () N
0 T (    @property) N
0 T (    def lo\(self\):) N
0 T (        """) N
0 T (        Return the lower bound on values for this independent variable.) N
(60) # (        Read-only.) N
0 T (        """) N
0 T (        return self._lo) N
0 T () N
0 T (    @property) N
(65) # (    def hi\(self\):) N
0 T (        """) N
0 T (        Return the upper bound on values for this independent variable.) N
0 T (        Read-only.) N
0 T (        """) N
(70) # (        return self._hi) N
0 T () N
0 T (    @property) N
0 T (    def type\(self\):) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Oct 26, 14 12:35) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/model.py, witschey/models/independent_variable.py) (6/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2,1) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        """) p n
(75) # (        Return the type of this independent variable.) N
0 T (        Read-only.) N
0 T (        """) N
0 T (        return self._type) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Oct 26, 14 12:35) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV  # noqa) N
0 T () N
(10) # () N
0 T (class DTLZ7\(Model\):) N
0 T (    def __init__\(self, ivs=30, dvs=20\):) N
0 T () N
0 T (        # dynamically generate these suckers) N
(15) # (        # h/t http://stackoverflow.com/a/13184536/3408454) N
0 T (        generated_fs = []) N
0 T (        for x in xrange\(1, dvs\):) N
0 T (            f = lambda xs: xs[x]) N
0 T (            f.__name__ = 'f{}'.format\(x\)) N
(20) # (            generated_fs.append\(f\)) N
0 T () N
0 T (        def g\(xs\):) N
0 T (            # avoid divide by 0 errors) N
0 T (            denom = abs\(xs[-1]\) or .0001) N
(25) # (            return 1 + \(9 / denom\) * sum\(xs\)) N
0 T () N
0 T (        def h\(xs, fs=generated_fs, g=g\):) N
0 T (            s = 0) N
0 T (            for f in fs:) N
(30) # (                fxs = f\(xs\)) N
0 T (                a = fxs / \(1 + g\(xs\)\)) N
0 T (                b = 1 + math.sin\(3 * math.pi * fxs\)) N
0 T (                s += a * b) N
0 T () N
(35) # (            return dvs - s) N
0 T () N
0 T (        def final_f\(xs\):) N
0 T (            return \(1 + g\(xs\)\) * h\(xs\)) N
0 T (        final_f.__name__ = 'f{}'.format\(dvs\)) N
(40) # () N
0 T (        fs = tuple\(generated_fs + [final_f]\)) N
0 T () N
0 T (        independents = tuple\(IV\(lo=0, hi=1\) for _ in xrange\(ivs\)\)) N
0 T (        super\(DTLZ7, self\).__init__\(independents=independents, dependents=fs\)) N
("csc710sbse: hw7: Witschey") (Page 1/1) (Oct 15, 14 20:49) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/independent_variable.py, witschey/models/dtlz7.py) (7/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV  # noqa) N
0 T (from witschey.base import memo_sqrt) N
(10) # () N
0 T () N
0 T (class Fonseca\(Model\):) N
0 T (    def __init__\(self, ivs=3\):) N
0 T (        ivs = tuple\(IV\(lo=-4, hi=4\) for _ in xrange\(ivs\)\)) N
(15) # () N
0 T (        def f1\(xs\):) N
0 T (            e = sum\(\(x - \(1 / memo_sqrt\(i+1\)\)\) ** 2 for i, x in enumerate\(xs\)\)) N
0 T (            return 1 - math.exp\(-e\)) N
0 T () N
(20) # (        def f2\(xs\):) N
0 T (            e = sum\(\(x + \(1 / memo_sqrt\(i+1\)\)\) ** 2 for i, x in enumerate\(xs\)\)) N
0 T (            return 1 - math.exp\(-e\)) N
0 T () N
0 T (        super\(Fonseca, self\).__init__\(independents=ivs, dependents=\(f1, f2\)\)) N
("csc710sbse: hw7: Witschey") (Page 1/1) (Oct 24, 14 18:30) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV  # noqa) N
0 T () N
(10) # () N
0 T (class Kursawe\(Model\):) N
0 T (    def __init__\(self, ivs=3, a=0.8, b=3\):) N
0 T (        ivs = tuple\(IV\(lo=-5, hi=5\) for _ in xrange\(ivs - 1\)\)) N
0 T (        self.a = a) N
(15) # (        self.b = b) N
0 T () N
0 T (        def f1\(xs\):) N
0 T (            rv = 0) N
0 T (            for i in xrange\(len\(xs\) - 1\):) N
(20) # (                exponent = \(-0.2\) * math.sqrt\(xs[i] ** 2 + xs[i+1] ** 2\)) N
0 T (                rv += -10 * math.exp\(exponent\)) N
0 T (            return rv) N
0 T () N
0 T (        def f2\(xs\):) N
(25) # (            f = lambda x: \(math.fabs\(x\)**self.a\) + \(5 * math.sin\(x\)**self.b\)) N
0 T (            return sum\(f\(x\) for x in xs\)) N
0 T () N
0 T (        super\(Kursawe, self\).__init__\(independents=ivs, dependents=\(f1, f2\)\)) N
("csc710sbse: hw7: Witschey") (Page 1/1) (Oct 15, 14 20:18) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/fonseca.py, witschey/models/kursawe.py) (8/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from model import Model) N
(5) # (from independent_variable import IndependentVariable as IV  # noqa) N
0 T () N
0 T () N
0 T (class Schaffer\(Model\):) N
0 T () N
(10) # (    def __init__\(self, ivs=1\):) N
0 T (        independents = tuple\(IV\(lo=-10 ** 5, hi=10 ** 5\) for _ in xrange\(ivs\)\)) N
0 T () N
0 T (        # use def instead of lambdas so the functions keep their __name__s) N
0 T (        def f1\(xs\):) N
(15) # (            return sum\(x ** 2 for x in xs\)) N
0 T () N
0 T (        def f2\(xs\):) N
0 T (            return sum\(\(x - 2\) ** 2 for x in xs\)) N
0 T () N
(20) # (        super\(Schaffer, self\).__init__\() N
0 T (            independents=independents, dependents=\(f1, f2\)\)) N
("csc710sbse: hw7: Witschey") (Page 1/1) (Oct 26, 14 1:41) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV  # noqa) N
0 T () N
(10) # () N
0 T (class Viennet3\(Model\):) N
0 T () N
0 T (    def __init__\(self\):) N
0 T () N
(15) # (        def f1\(xs\):) N
0 T (            xs_2_sum = xs[0] ** 2 + xs[1] ** 2) N
0 T (            return \(0.5 * xs_2_sum\) + math.sin\(xs_2_sum\)) N
0 T () N
0 T (        def f2\(xs\):) N
(20) # (            x_1 = xs[0]) N
0 T (            x_2 = xs[1]) N
0 T () N
0 T (            a = \(\(3 * x_1 - 2 * x_2 + 4\) ** 2\) / 8) N
0 T (            b = \(\(x_1 + x_2 + 1\) ** 2\) / 27) N
(25) # () N
0 T (            return a + b + 15) N
0 T () N
0 T (        def f3\(xs\):) N
0 T (            x_1sq = xs[0] ** 2) N
(30) # (            x_2sq = xs[1] ** 2) N
0 T () N
0 T (            a = 1 / \(x_1sq + x_2sq + 1\)) N
0 T (            b = 1.1 * math.exp\(-x_1sq - x_2sq\)) N
0 T () N
(35) # (            return a - b) N
0 T () N
0 T (        ivs = \(IV\(lo=-3, hi=3\), IV\(lo=-3, hi=3\)\)) N
0 T () N
0 T (        super\(Viennet3, self\).__init__\() N
(40) # (            independents=ivs, dependents=\(f1, f2, f3\)\)) N
("csc710sbse: hw7: Witschey") (Page 1/1) (Oct 26, 14 13:38) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/schaffer.py, witschey/models/viennet3.py) (9/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1,1) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV  # noqa) N
0 T () N
(10) # () N
0 T (class ZDT1\(Model\):) N
0 T (    def __init__\(self, ivs=30\):) N
0 T () N
0 T (        def g\(xs\):) N
(15) # (            return 1 + 9 * sum\(xs[1:]\) / \(len\(xs\) - 1\)) N
0 T () N
0 T (        def f1\(xs\):) N
0 T (            return xs[0]) N
0 T () N
(20) # (        def f2\(xs\):) N
0 T (            gxs = g\(xs\)) N
0 T (            return gxs * \(1 - math.sqrt\(xs[0] / gxs\)\)) N
0 T () N
0 T (        ivs = tuple\(IV\(lo=0, hi=1\) for _ in xrange\(30\)\)) N
(25) # (        super\(ZDT1, self\).__init__\(independents=ivs, dependents=\(f1, f2, g\)\)) N
("csc710sbse: hw7: Witschey") (Page 1/1) (Oct 26, 14 2:07) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (# all adapted from Dr. Tim Menzies' model code:) p n
0 T (# https://github.com/timm/sbse14/blob/master/models.py) N
0 T () N
0 T (from __future__ import division) N
(5) # () N
0 T (import math) N
0 T () N
0 T (from model import Model) N
0 T (from independent_variable import IndependentVariable as IV  # noqa) N
(10) # (from witschey.base import memo_sqrt) N
0 T () N
0 T () N
0 T (class ZDT3\(Model\):) N
0 T () N
(15) # (    def __init__\(self, ivs=30\):) N
0 T () N
0 T (        def g\(xs\):) N
0 T (            return 1 + 9 * sum\(xs[1:]\) / \(len\(xs\) - 1\)) N
0 T () N
(20) # (        def f1\(xs\):) N
0 T (            return xs[0]) N
0 T () N
0 T (        def f2\(xs\):) N
0 T (            gxs = g\(xs\)) N
(25) # (            a = 1 - memo_sqrt\(xs[0] / gxs\) - \(xs[0] / gxs\)) N
0 T (            a *= math.sin\(10 * math.pi * xs[0]\)) N
0 T (            return gxs * a) N
0 T () N
0 T (        ivs = tuple\(IV\(lo=0, hi=1\) for _ in xrange\(30\)\)) N
(30) # () N
0 T (        super\(ZDT3, self\).__init__\(independents=ivs, dependents=\(f1, f2, g\)\)) N
("csc710sbse: hw7: Witschey") (Page 1/1) (Oct 26, 14 2:16) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/zdt1.py, witschey/models/zdt3.py) (10/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, print_function) p n
0 T () N
0 T (import inspect) N
0 T () N
(5) # (from model import Model, ModelInputException) N
0 T (from independent_variable import IndependentVariable as IV  # noqa) N
0 T () N
0 T () N
0 T (def _lambda_string_strip\(s\):) N
(10) # (    return inspect.getsource\(s\).split\('lambda x: '\)[1][:-2]) N
0 T () N
0 T () N
0 T (class Osyczka\(Model\):) N
0 T () N
(15) # (    def __init__\(self\):) N
0 T (        self.checks = []) N
0 T (        self.checks.append\(lambda x: x[0] + x[1] - 2 >= 0\)) N
0 T (        self.checks.append\(lambda x: 6 - x[0] - x[1] >= 0\)) N
0 T (        self.checks.append\(lambda x: 2 - x[1] + x[0] >= 0\)) N
(20) # (        self.checks.append\(lambda x: 2 - x[0] + 3 * x[1] >= 0\)) N
0 T (        self.checks.append\(lambda x: 4 - \(x[2] - 3\) ** 2 - x[3] >= 0\)) N
0 T (        self.checks.append\(lambda x: \(x[4] - 3\) ** 2 + x[5] - 4 >= 0\)) N
0 T () N
0 T (        independents = tuple\(IV\(lo=lo, hi=hi\) for lo, hi in) N
(25) # (                             \(\(0, 10\), \(0, 10\), \(1, 5\),) N
0 T (                              \(0, 6\), \(1, 5\), \(0, 10\)\)\)) N
0 T () N
0 T (        def f1\(xs\):) N
0 T (            return sum\(\(\(-25 * \(xs[0] - 2\) ** 2\),) N
(30) # (                        \(- \(xs[1] - 2\) ** 2\),) N
0 T (                        \(- \(xs[2] - 1\) ** 2\),) N
0 T (                        \(- \(xs[3] - 4\) ** 2\),) N
0 T (                        \(- \(xs[4] - 1\) ** 2\)\)\)) N
0 T () N
(35) # (        def f2\(xs\):) N
0 T (            return sum\(x ** 2 for x in xs\)) N
0 T () N
0 T (        super\(Osyczka, self\).__init__\(independents=independents,) N
0 T (                                      dependents=\(f1, f2\)\)) N
(40) # () N
0 T (    def random_input_vector\(self\):) N
0 T (        while True:) N
0 T (            candidate = super\(Osyczka, self\).random_input_vector\(\)) N
0 T (            try:) N
(45) # (                self._fail_on_constraint_violations\(candidate, no_msg=True\)) N
0 T (                return candidate) N
0 T (            except ModelInputException:) N
0 T (                pass) N
0 T () N
(50) # (    def valid_input\(self, xs\):) N
0 T (        try:) N
0 T (            self._fail_on_constraint_violations\(xs, no_msg=True\)) N
0 T (        except ModelInputException:) N
0 T (            return False) N
(55) # (        return True) N
0 T () N
0 T (    def _fail_on_constraint_violations\(self, xs, no_msg=False\):) N
0 T (        msgs = []) N
0 T (        for check in self.checks:) N
(60) # (            if not check\(xs\):) N
0 T (                if no_msg:) N
0 T (                    raise ModelInputException\(xs\)) N
0 T (                msgs.append\(_lambda_string_strip\(check\)\)) N
0 T () N
(65) # (        if msgs:) N
0 T (            err = "{} failed on input {}:".format\(self.__class__.__name__, xs\)) N
0 T (            if len\(msgs\) == 1:) N
0 T (                err += ' {}'.format\(msgs[0]\)) N
0 T (            else:) N
(70) # (                pre = '\\n\\tviolated constraint: ') N
0 T (                err += pre + pre.join\(msgs\)) N
0 T (            raise ModelInputException\(err\)) N
0 T () N
("csc710sbse: hw7: Witschey") (Page 1/2) (Nov 05, 14 21:05) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (    def __call__\(self, xs, io=False\):) p n
(75) # (        self._fail_on_constraint_violations\(xs\)) N
0 T (        return super\(Osyczka, self\).__call__\(xs, io=io\)) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Nov 05, 14 21:05) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/models/osyczka.py) (11/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, unicode_literals) p n
0 T () N
0 T (from datetime import datetime) N
0 T (import abc) N
(5) # (from types import NoneType) N
0 T (from collections import namedtuple, OrderedDict) N
0 T () N
0 T (from witschey.base import memo) N
0 T (from witschey.models import Model) N
(10) # (from witschey.config import CONFIG) N
0 T () N
0 T () N
0 T (class Searcher\(object\):) N
0 T (    # allows us to get all subclasses with __subclasses__\(\)) N
(15) # (    __metaclass__ = abc.ABCMeta) N
0 T () N
0 T (    def __new__\(cls, *args, **kwargs\):) N
0 T (        # construct our object) N
0 T (        future_self = super\(Searcher, cls\).__new__\(cls, *args, **kwargs\)) N
(20) # () N
0 T (        name = cls.__name__) N
0 T (        # initialize a dict with searcher's name) N
0 T (        # and the initialization time) N
0 T (        d = dict\(searcher=name, initialized=datetime.now\(\)\)) N
(25) # () N
0 T (        # if there are global options for this class or its bases in CONFIG) N
0 T (        for k in [k.__name__ for k in cls.__bases__] + [name]:) N
0 T (            if hasattr\(CONFIG, k\):) N
0 T (                # add them to the dict) N
(30) # (                d.update\(getattr\(CONFIG, k\).__dict__\)) N
0 T () N
0 T (        # then, add the kwargs to the constructor call to the dict.) N
0 T (        # NB: this happens after adding options from The, so) N
0 T (        #     call-specific options override the globals) N
(35) # (        d.update\(kwargs\)) N
0 T () N
0 T (        # set our spec with the contents of the dict) N
0 T (        future_self.spec = memo\(**d\)) N
0 T () N
(40) # (        return future_self) N
0 T () N
0 T (    def __init__\(self, model, *args, **kw\):) N
0 T (        self.model = model\(\)) N
0 T () N
(45) # (    def run\(*args, **kwargs\):) N
0 T (        raise NotImplementedError\(\)) N
0 T () N
0 T () N
0 T (class SearcherConfig\(object\):) N
(50) # () N
0 T (    def __init__\(self, searcher=None, model=None, **kwargs\):) N
0 T (        self.searcher, self.model = searcher, model) N
0 T (        self._kw_dict = kwargs) N
0 T () N
(55) # (    def get_searcher\(self, searcher=None, model=None, **kwargs\):) N
0 T (        s = searcher or self.searcher) N
0 T (        m = model or self.model) N
0 T (        kw = self._kw_dict.copy\(\).update\(kwargs\) or {}) N
0 T (        return s\(m, **kw\)) N
(60) # () N
0 T (    @property) N
0 T (    def searcher\(self\):) N
0 T (        return self._searcher) N
0 T () N
(65) # (    @searcher.setter) N
0 T (    def searcher\(self, value\):) N
0 T (        if isinstance\(value, NoneType\) or issubclass\(value, Searcher\):) N
0 T (            self._searcher = value) N
0 T (        else:) N
(70) # (            raise TypeError\('{} is not a Searcher or None'.format\(value\)\)) N
0 T () N
0 T (    @property) N
0 T (    def model\(self\):) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Oct 31, 14 15:53) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        return self._model) p n
(75) # () N
0 T (    @model.setter) N
0 T (    def model\(self, value\):) N
0 T (        if isinstance\(value, NoneType\) or issubclass\(value, Model\):) N
0 T (            self._model = value) N
(80) # (        else:) N
0 T (            raise TypeError\('{} is not a Model or None'.format\(value\)\)) N
0 T () N
0 T (    def update\(self, searcher=None, model=None, **kwargs\):) N
0 T (        if searcher is not None:) N
(85) # (            self.searcher = searcher) N
0 T (        if model is not None:) N
0 T (            self.model = model) N
0 T (        self._kw_dict.update\(kwargs\)) N
0 T () N
(90) # (    def as_dict\(self\):) N
0 T (        "returns a OrderedDict with the searcher and model first") N
0 T (        return OrderedDict\(searcher=self._searcher,) N
0 T (                           model=self._model, **self._kw_dict\)) N
0 T () N
(95) # (    def __repr__\(self\):) N
0 T (        kw_string = ', '.join\('{0}={1}'.format\(k, v\)) N
0 T (                              for k, v in self.as_dict\(\).iteritems\(\)\)) N
0 T (        return '{0}\({1}\)'.format\(self.__class__.__name__, kw_string\)) N
0 T () N
(100) # () N
0 T (SearchReport = namedtuple\('SearchReport',) N
0 T (                          ['best', 'best_era', 'evaluations', 'searcher',) N
0 T (                           'spec', 'report']\)) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Oct 31, 14 15:53) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/searchers/searcher.py) (12/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, print_function) p n
0 T () N
0 T (import random) N
0 T (import math) N
(5) # () N
0 T (from searcher import Searcher, SearchReport) N
0 T (from witschey.base import NullObject, StringBuilder) N
0 T (from witschey.log import NumberLog) N
0 T (from witschey.models import ModelInputException) N
(10) # () N
0 T () N
0 T (class SimulatedAnnealer\(Searcher\):) N
0 T (    """) N
0 T (    A searcher that works by mostly-dumb stochastic search that starts with) N
(15) # (    lots of random jumps, then makes fewer random jumps, simulating a cooling) N
0 T (    process. See http://en.wikipedia.org/wiki/Simulated_annealing and) N
0 T (    https://github.com/timm/sbse14/wiki/sa for more information.) N
0 T (    """) N
0 T () N
(20) # (    def __init__\(self, *args, **kwargs\):) N
0 T (        super\(SimulatedAnnealer, self\).__init__\(*args, **kwargs\)) N
0 T (        self._current = self.model.random_model_io\(\)) N
0 T (        self._best = self._current  # assumes current is immutable) N
0 T (        self._lives = 4) N
(25) # (        self._best_era = None) N
0 T (        self._current_era_energies = NumberLog\(max_size=None\)) N
0 T () N
0 T (    def run\(self, text_report=True\):) N
0 T (        """) N
(30) # (        Run the SimulatedAnnealer on the model specified at object) N
0 T (        instantiation time.) N
0 T (        """) N
0 T (        self._report = StringBuilder\(\) if text_report else NullObject\(\)) N
0 T (        evals = None) N
(35) # () N
0 T (        for k in range\(self.spec.iterations\):) N
0 T (            if self._lives <= 0 and self.spec.terminate_early:) N
0 T (                evals = k) N
0 T (                break) N
(40) # (            self._update\(k / self.spec.iterations\)) N
0 T (            if k % self.spec.era_length == 0 and k != 0:) N
0 T (                self._end_era\(\)) N
0 T () N
0 T (        if evals is None:) N
(45) # (            evals = self.spec.iterations) N
0 T (        return SearchReport\(best=self._best.energy, evaluations=evals,) N
0 T (                            best_era=self._best_era, spec=self.spec,) N
0 T (                            searcher=self.__class__, report=self._report\)) N
0 T () N
(50) # (    def _mutate\(self, xs\):) N
0 T (        return tuple\(xs[i] if random.random\(\) < self.spec.p_mutation else v) N
0 T (                     for i, v in enumerate\(self.model.random_input_vector\(\)\)\)) N
0 T () N
0 T (    def _get_neighbor\(self, model_io\):) N
(55) # (        neighbor = None) N
0 T (        while neighbor is None:) N
0 T (            gen = self._mutate\(model_io.xs\)) N
0 T (            try:) N
0 T (                neighbor = self.model\(tuple\(gen\), io=True\)) N
(60) # (            except ModelInputException:) N
0 T (                pass) N
0 T () N
0 T (        return neighbor) N
0 T () N
(65) # (    def _end_era\(self\):) N
0 T (        self._report += \('\\n', '{: .2}'.format\(self._best.energy\), ' '\)) N
0 T (        if not self._best_era:) N
0 T (            self._best_era = self._current_era_energies) N
0 T () N
(70) # (        try:) N
0 T (            improved = self._current_era_energies.better\() N
0 T (                self._prev_era_energies\)) N
0 T (        except AttributeError:) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Oct 26, 14 3:10) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (            improved = False) p n
(75) # (        if improved:) N
0 T (            self._best_era = self._current_era_energies) N
0 T (        else:) N
0 T (            self._lives -= 1) N
0 T () N
(80) # (        self._prev_era_energies = self._current_era_energies) N
0 T (        self._current_era_energies = NumberLog\(max_size=None\)) N
0 T () N
0 T (    def _update\(self, temperature\):) N
0 T (        """update the state of the annealer""") N
(85) # (        # generate new neighbor) N
0 T (        neighbor = self._get_neighbor\(self._current\)) N
0 T (        self._current_era_energies += neighbor.energy) N
0 T () N
0 T (        # compare neighbor and update best) N
(90) # (        if neighbor.energy < self._best.energy:) N
0 T (            self._best, self._current = neighbor, neighbor) N
0 T (            self._report += '!') N
0 T () N
0 T (        if neighbor.energy < self._current.energy:) N
(95) # (            self._current = neighbor) N
0 T (            self._report += '+') N
0 T (        else:) N
0 T (            # if neighbor is worse than current, we still jump there sometimes) N
0 T (            cnorm = self.model.normalize\(self._current.energy\)) N
(100) # (            nnorm = self.model.normalize\(neighbor.energy\)) N
0 T (            # occasionally jump to neighbor, even if it's a bad idea) N
0 T (            if self._good_idea\(cnorm, nnorm, temperature\) < random.random\(\):) N
0 T (                self._current = neighbor) N
0 T (                self._report += '?') N
(105) # () N
0 T (        self._report += '.') N
0 T () N
0 T (    def _good_idea\(self, old, new, temp\):) N
0 T (        """) N
(110) # (        sets the threshold we compare to to decide whether to jump) N
0 T () N
0 T (        returns e^-\(\(new-old\)/temp\)) N
0 T (        """) N
0 T (        numerator = new - old) N
(115) # () N
0 T (        if not 0 <= numerator <= 1:) N
0 T (            numerator = old - new) N
0 T (        try:) N
0 T (            exponent = numerator / temp) N
(120) # (        except ZeroDivisionError:) N
0 T (            return 0) N
0 T (        rv = math.exp\(-exponent\)) N
0 T (        if rv > 1:) N
0 T (            raise ValueError\('p returning greater than one',) N
(125) # (                             rv, old, new, temp\)) N
0 T (        return rv * self.spec.cooling_factor) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Oct 26, 14 3:10) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/searchers/simulated_annealer.py) (13/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division) p n
0 T () N
0 T (import random) N
0 T () N
(5) # (from searcher import Searcher, SearchReport) N
0 T (from witschey import base) N
0 T (from witschey.base import tuple_replace, StringBuilder, NullObject) N
0 T (from witschey.log import NumberLog) N
0 T (from witschey.models import ModelInputException) N
(10) # () N
0 T () N
0 T (class MaxWalkSat\(Searcher\):) N
0 T () N
0 T (    def _local_search_xs\(self, bottom, top, n=10\):) N
(15) # (        '''divide the space from bottom to top into n partitions, then) N
0 T (        randomly sample within each partition''') N
0 T (        chunk_length = \(top - bottom\) / n) N
0 T () N
0 T (        for i in range\(n\):) N
(20) # (            i = \(i * chunk_length\) + bottom) N
0 T (            yield random.uniform\(i, i + chunk_length\)) N
0 T () N
0 T (    def _update\(self, improvement_char, dimension=None, value=None\):) N
0 T (        '''calculate the next value from the model and update state as) N
(25) # (        necessary''') N
0 T (        # check for invalid input) N
0 T (        if value is not None and dimension is None:) N
0 T (            err = 'cannot call _update with specified value but no dimension') N
0 T (            raise ValueError\(err\)) N
(30) # () N
0 T (        if dimension is None:) N
0 T (            dimension = base.random_index\(self._current.xs\)) N
0 T () N
0 T (        if value is None:) N
(35) # (            # get random value if no value input) N
0 T (            value = self.model.xs[dimension]\(\)) N
0 T () N
0 T (        updated = False) N
0 T (        while not updated:) N
(40) # (            new_xs = tuple_replace\(self._current.xs, dimension, value\)) N
0 T (            try:) N
0 T (                self._current = self.model\(new_xs, io=True\)) N
0 T (                updated = True) N
0 T (            except ModelInputException:) N
(45) # (                value = self.model.xs[dimension]\(\)) N
0 T () N
0 T (        self._evals += 1) N
0 T (        self._current_era += self._current.energy) N
0 T () N
(50) # (        # compare to previous best and update as necessary) N
0 T (        if self._current.energy < self._best.energy:) N
0 T (            self._best = self._current) N
0 T (            self._report += improvement_char) N
0 T (        else:) N
(55) # (            self._report += '.') N
0 T () N
0 T (        # end-of-era bookkeeping) N
0 T (        if self._evals % self.spec.era_length == 0:) N
0 T (            self._end_era\(\)) N
(60) # () N
0 T (    def _end_era\(self\):) N
0 T (        self._report += \('\\n{: .2}'.format\(self._best.energy\), ' '\)) N
0 T () N
0 T (        # _prev_era won't exist in era 0, so account for that case) N
(65) # (        try:) N
0 T (            improved = self._current_era.better\(self._prev_era\)) N
0 T (        except AttributeError:) N
0 T (            improved = False) N
0 T (        self._prev_era = self._current_era) N
(70) # () N
0 T (        # track best_era) N
0 T (        if improved or self._best_era is None:) N
0 T (            self._best_era = self._current_era) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Oct 26, 14 16:11) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        else:) p n
(75) # (            self._lives -= 1) N
0 T () N
0 T (        if self._lives <= 0:) N
0 T (            self._terminate = True) N
0 T (        else:) N
(80) # (            self._current_era = NumberLog\(\)) N
0 T () N
0 T (    def run\(self, text_report=True\):) N
0 T (        '''run MaxWalkSat on self.model''') N
0 T () N
(85) # (        # current ModelIO to evaluate and mutate) N
0 T (        self._current = self.model.random_model_io\(\)) N
0 T (        self._best = self._current) N
0 T (        # initialize and update log variables to track values by era) N
0 T (        self._current_era = NumberLog\(\)) N
(90) # (        self._current_era += self._current.energy) N
0 T (        self._best_era = None) N
0 T (        # bookkeeping variables) N
0 T (        self._evals = 0) N
0 T (        self._lives = 4) N
(95) # (        self._report = StringBuilder\(\) if text_report else NullObject\(\)) N
0 T (        self._terminate = False) N
0 T () N
0 T (        while self._evals < self.spec.iterations and not self._terminate:) N
0 T (            # get the generator for a random independent variable) N
(100) # () N
0 T (            if self.spec.p_mutation > random.random\(\):) N
0 T (                # if not searching a dimension, mutate randomly) N
0 T (                self._update\('+'\)) N
0 T (            else:) N
(105) # (                # if doing a local search, choose a dimension) N
0 T (                dimension = base.random_index\(self._current.xs\)) N
0 T (                search_iv = self.model.xs[dimension]) N
0 T (                # then try points all along the dimension) N
0 T (                lo, hi = search_iv.lo, search_iv.hi) N
(110) # (                for j in self._local_search_xs\(lo, hi, 10\):) N
0 T (                    self._update\('|', dimension=dimension, value=j\)) N
0 T () N
0 T (        return SearchReport\(best=self._best.energy,) N
0 T (                            best_era=self._best_era,) N
(115) # (                            evaluations=self._evals,) N
0 T (                            searcher=self.__class__,) N
0 T (                            spec=self.spec,) N
0 T (                            report=self._report\)) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Oct 26, 14 16:11) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/searchers/maxwalksat.py) (14/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, print_function) p n
0 T () N
0 T (from itertools import chain, combinations, cycle, izip, tee) N
0 T (import random) N
(5) # (from collections import Iterable) N
0 T () N
0 T (from witschey import base) N
0 T (from searcher import Searcher, SearchReport) N
0 T (from witschey.log import NumberLog) N
(10) # (from witschey.models import ModelInputException) N
0 T () N
0 T (# adapted from Chris Theisen's code) N
0 T (#     his code provided the shell that I worked in and styled to my liking) N
0 T (# Structure from:) N
(15) # (# www.cleveralgorithms.com/nature-inspired/evolution/genetic_algorithm.html) N
0 T () N
0 T () N
0 T (def _random_crossover_points\(n, length\):) N
0 T (    # get n random valid crossover points for a sequence of len length) N
(20) # (    r = list\(xrange\(1, length - 1\)\)) N
0 T (    if len\(r\) <= length:) N
0 T (        return r) N
0 T (    xovers = sorted\(random.sample\(xrange\(1, length - 1\), n\)\)) N
0 T (    return xovers) N
(25) # () N
0 T () N
0 T (def _crossover_at\(seq1, seq2, xovers\):) N
0 T (    # takes two sequences and a single crossover point or a list of points) N
0 T (    if not isinstance\(xovers, Iterable\):) N
(30) # (        xovers = [xovers]) N
0 T (    cycle_seq = cycle\(\(seq1, seq2\)\)) N
0 T () N
0 T (    # iter. of start and stop points for sections) N
0 T (    xovers = chain\(\(None,\), xovers, \(None,\)\)) N
(35) # (    parent_point_zip = izip\(cycle_seq, base.pairs\(xovers\)\)) N
0 T () N
0 T (    segments = tuple\(parent[start_stop[0]:start_stop[1]]) N
0 T (                     for parent, start_stop in parent_point_zip\)) N
0 T () N
(40) # (    return tuple\(chain\(*segments\)\)) N
0 T () N
0 T () N
0 T (class GeneticAlgorithm\(Searcher\):) N
0 T (    """) N
(45) # (    A searcher that searches the input space by modeling a population of) N
0 T (    organisms that 'breed', are selected for their good qualities, and) N
0 T (    mutate slightly from generation to generation.) N
0 T () N
0 T (    For more information, see https://github.com/timm/sbse14/wiki/Ga and) N
(50) # (    http://en.wikipedia.org/wiki/Genetic_algorithm.) N
0 T (    """) N
0 T () N
0 T (    def _mutate\(self, child\):) N
0 T (        i = base.random_index\(child\)) N
(55) # (        return base.tuple_replace\(child, i, self.model.xs[i]\(\)\)) N
0 T () N
0 T (    def _crossover\(self, parent1, parent2, xovers=None\):) N
0 T (        if len\(parent1\) != len\(parent2\):) N
0 T (            raise ValueError\('parents must be same length to breed'\)) N
(60) # (        if len\(parent1\) == 1:) N
0 T (            return random.choice\(\(parent1, parent2\)\)) N
0 T (        if xovers is None:) N
0 T (            xovers = self.spec.crossovers) N
0 T () N
(65) # (        x_pts = _random_crossover_points\(xovers, len\(parent1\)\)) N
0 T () N
0 T (        return _crossover_at\(parent1, parent2, x_pts\)) N
0 T () N
0 T (    def _select_parents\(self\):) N
(70) # (        """) N
0 T (        Return an iterator with 2 copies of each pair of parents in the) N
0 T (        population) N
0 T (        """) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Nov 05, 14 21:05) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        return chain\(*tee\(combinations\(self._population, 2\)\)\)) p n
(75) # () N
0 T (    def _breed_next_generation\(self\):) N
0 T (        children = []) N
0 T (        for parent1, parent2 in self._select_parents\(\):) N
0 T (            failures = 0) N
(80) # (            child = None) N
0 T (            while child is None:) N
0 T (                xs = self._crossover\(parent1.xs, parent2.xs\)) N
0 T (                if random.random\(\) < self.spec.p_mutation or failures > 0:) N
0 T (                    # mutate more if the parents don't work well together) N
(85) # (                    for _ in range\(max\(failures + 1, len\(xs\)\)\):) N
0 T (                        xs = self._mutate\(xs\)) N
0 T (                try:) N
0 T (                    child = self.model\(xs, io=True\)) N
0 T (                except ModelInputException:) N
(90) # (                    failures += 1) N
0 T (            children.append\(child\)) N
0 T (        self._evals += len\(children\)) N
0 T (        return tuple\(children[:self.spec.population_size]\)) N
0 T () N
(95) # (    def run\(self, text_report=True\):) N
0 T (        init_xs = tuple\(self.model.random_input_vector\(\)) N
0 T (                        for _ in xrange\(self.spec.population_size\)\)) N
0 T (        get_energy = lambda x: x.energy) N
0 T (        best_era = None) N
(100) # () N
0 T (        report = base.StringBuilder\(\) if text_report else base.NullObject\(\)) N
0 T () N
0 T (        self._population = tuple\(self.model.compute_model_io\(xs\)) N
0 T (                                 for xs in init_xs\)) N
(105) # () N
0 T (        best = min\(self._population, key=get_energy\)) N
0 T () N
0 T (        self._evals, lives = 0, 4) N
0 T () N
(110) # (        for gen in xrange\(self.spec.iterations\):) N
0 T (            if self._evals > self.spec.iterations or lives <= 0:) N
0 T (                break) N
0 T () N
0 T (            prev_best_energy = best.energy) N
(115) # () N
0 T (            self._population = self._breed_next_generation\(\)) N
0 T () N
0 T (            best_in_generation = min\(self._population, key=get_energy\)) N
0 T (            best = min\(best, best_in_generation, key=get_energy\)) N
(120) # () N
0 T (            report += str\(best.energy\)) N
0 T (            report += \('+' if x.energy < prev_best_energy else '.') N
0 T (                       for x in self._population\)) N
0 T (            report += '\\n') N
(125) # () N
0 T (            energies = NumberLog\(inits=\(c.energy for c in self._population\)\)) N
0 T (            try:) N
0 T (                improved = energies.better\(prev_energies\)) N
0 T (            except NameError:) N
(130) # (                improved = False) N
0 T (            prev_energies = energies  # noqa: flake8 doesn't catch use above) N
0 T () N
0 T (            if improved:) N
0 T (                best_era = energies) N
(135) # (            else:) N
0 T (                lives -= 1) N
0 T () N
0 T (        if best_era is None:) N
0 T (            best_era = energies) N
(140) # () N
0 T (        return SearchReport\(best=best.energy,) N
0 T (                            best_era=best_era,) N
0 T (                            evaluations=self._evals,) N
0 T (                            searcher=self.__class__,) N
(145) # (                            spec=self.spec,) N
0 T (                            report=None\)) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Nov 05, 14 21:05) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/searchers/genetic_algorithm.py) (15/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division, print_function) p n
0 T () N
0 T (import random) N
0 T (from itertools import izip) N
(5) # () N
0 T (from searcher import Searcher, SearchReport) N
0 T (from witschey.base import memo_sqrt as sqrt) N
0 T (from witschey.log import NumberLog) N
0 T (from witschey.models import ModelInputException) N
(10) # () N
0 T () N
0 T (def _random_scaled_velocity\(a, b, scale=.1\):) N
0 T (    magnitude = max\(a, b\) - min\(a, b\)) N
0 T (    return random.uniform\(-magnitude, magnitude\) * scale) N
(15) # () N
0 T () N
0 T (class ParticleSwarmOptimizer\(Searcher\):) N
0 T (    """) N
0 T (    A searcher that models a "flock" of individuals roaming the search space.) N
(20) # (    Individuals make decisions about where to go next based both on their) N
0 T (    own experience and on the experience of the whole group. For more) N
0 T (    information, see https://github.com/timm/sbse14/wiki/pso#details and) N
0 T (    http://en.wikipedia.org/wiki/Particle_swarm_optimization) N
0 T (    """) N
(25) # () N
0 T (    def __init__\(self, *args, **kwargs\):) N
0 T (        super\(ParticleSwarmOptimizer, self\).__init__\(*args, **kwargs\)) N
0 T () N
0 T (        self._flock = tuple\(self._new_particle\(\)) N
(30) # (                            for _ in range\(self.spec.population_size\)\)) N
0 T (        self._evals = len\(self._flock\)) N
0 T (        self._current_flock_energies = NumberLog\(p.energy) N
0 T (                                                 for p in self._flock\)) N
0 T (        self._best = min\(self._flock, key=lambda x: x.energy\)) N
(35) # (        self._lives = 4) N
0 T () N
0 T (    def _new_particle\(self\):) N
0 T (        return Particle\(self.model, self.spec.phi1, self.spec.phi2\)) N
0 T () N
(40) # (    def _update\(self\):) N
0 T (        self._prev_flock_energies = self._current_flock_energies) N
0 T () N
0 T (        for p in self._flock:) N
0 T (            p._update\(self._best\)) N
(45) # (        self._evals += len\(self._flock\)) N
0 T (        self._current_flock_energies = NumberLog\(p.energy) N
0 T (                                                 for p in self._flock\)) N
0 T () N
0 T (        self._best = min\(self._best, *self._flock, key=lambda x: x.energy\)) N
(50) # (        if self._current_flock_energies.better\(self._prev_flock_energies\):) N
0 T (            self._best_flock = self._flock) N
0 T (        else:) N
0 T (            self._lives -= 1) N
0 T () N
(55) # (    def run\(self, text_report=False\):) N
0 T (        for i in range\(self.spec.generations\):) N
0 T (            self._update\(\)) N
0 T (            if self._lives <= 0 or self._evals >= self.spec.iterations:) N
0 T (                break) N
(60) # () N
0 T (        best_flock_energies = NumberLog\(p.energy for p in self._best_flock\)) N
0 T (        return SearchReport\(best=self._best,) N
0 T (                            best_era=best_flock_energies,) N
0 T (                            evaluations=self._evals,) N
(65) # (                            searcher=self.__class__,) N
0 T (                            spec=self.spec,) N
0 T (                            report=None\)) N
0 T () N
0 T () N
(70) # (class Particle\(object\):) N
0 T (    """) N
0 T (    A particle in the "flock".) N
0 T (    """) N
("csc710sbse: hw7: Witschey") (Page 1/2) (Oct 26, 14 1:59) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T () p n
(75) # (    def __init__\(self, model, phi1, phi2\):) N
0 T (        self._model = model) N
0 T (        self._current = model.random_model_io\(\)) N
0 T (        self._best = self._current) N
0 T (        self._phi1, self._phi2 = phi1, phi2) N
(80) # () N
0 T (        # calculate constriction factor) N
0 T (        phi = phi1 + phi2) N
0 T (        self._k = 2 / abs\(2 - phi - sqrt\(phi * phi\) - 4 * phi\)) N
0 T () N
(85) # (        # initialize velocities) N
0 T (        self._velocity = tuple\(_random_scaled_velocity\(iv.lo, iv.hi\)) N
0 T (                               for iv in model.xs\)) N
0 T () N
0 T (    @property) N
(90) # (    def energy\(self\):) N
0 T (        return self._current.energy) N
0 T () N
0 T (    def _compute_new_velocity\(self, local_best\):) N
0 T (        to_local = tuple\(a - b) N
(95) # (                             for a, b in izip\(local_best.xs, self._current.xs\)\)) N
0 T (        to_personal = tuple\(a - b) N
0 T (                            for a, b in izip\(self._best.xs, self._current.xs\)\)) N
0 T (        v = tuple\(\(self._k * \(v + self._phi1 * loc + self._phi2 * pers\)) N
0 T (                   for v, loc, pers in izip\() N
(100) # (                       self._velocity, to_local, to_personal\)\)\)) N
0 T (        return v) N
0 T () N
0 T (    def _update\(self, local_best\):) N
0 T (        """) N
(105) # (        Given local_best, the best value seen by this particle's neighbors,) N
0 T (        find the particle's new velocity.) N
0 T (        """) N
0 T (        init_loc = self._current.xs) N
0 T (        init_vel = self._velocity) N
(110) # (        candidate_xs = tuple\(p + v for p, v in izip\(init_loc, init_vel\)\)) N
0 T () N
0 T (        updated = False) N
0 T (        while not updated:) N
0 T (            try:) N
(115) # (                self._current = self._model.compute_model_io\(candidate_xs\)) N
0 T (                updated = True) N
0 T (            except ModelInputException:) N
0 T (                candidate_xs = self._model.random_replace\(candidate_xs\)) N
0 T () N
(120) # (        self._velocity = self._compute_new_velocity\(self._best\)) N
("csc710sbse: hw7: Witschey") (Page 2/2) (Oct 26, 14 1:59) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/searchers/particle_swarm_optimizer.py) (16/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (from __future__ import division) p n
0 T () N
0 T () N
0 T (import random) N
(5) # (from itertools import repeat, izip) N
0 T () N
0 T (from log import NumberLog) N
0 T (import texttable) N
0 T (from basic_stats import xtile) N
(10) # (from witschey import basic_stats) N
0 T (from witschey.base import memo_sqrt) N
0 T () N
0 T () N
0 T (def a12\(xs, ys\):) N
(15) # (    gt, eq = 0, 0) N
0 T (    for x in xs:) N
0 T (        for y in ys:) N
0 T (            if x > y:) N
0 T (                gt += 1) N
(20) # (            if x == y:) N
0 T (                eq += 1) N
0 T () N
0 T (    return \(gt + eq / 2\) / \(len\(xs\) * len\(ys\)\)) N
0 T () N
(25) # () N
0 T (def a12_fast\(xs, ys\):) N
0 T (    """) N
0 T (    Non-parametric statistical test. Answers the question: "If you pick a) N
0 T (    random x from xs, and a random y from ys, what's the probability that) N
(30) # (    x will be greater than y?") N
0 T (    """) N
0 T () N
0 T (    xs_i = izip\(sorted\(xs, reverse=True\), repeat\(0\)\)) N
0 T (    ys_i = izip\(sorted\(ys, reverse=True\), xrange\(len\(ys\), 0, -1\)\)) N
(35) # () N
0 T (    gt, eq = 0, 0) N
0 T () N
0 T (    cs, ds = xs_i, ys_i) N
0 T (    c, d = cs.next\(\), ds.next\(\)) N
(40) # (    while True:) N
0 T (        try:) N
0 T (            while d[0] < c[0]:) N
0 T (                gt += d[1]) N
0 T (                # gt += 1) N
(45) # (                print\(d\)) N
0 T (                d = ds.next\(\)) N
0 T (            else:) N
0 T (                if d[0] == c[0]:) N
0 T (                    eq += 1) N
(50) # (                    d = ds.next\(\)) N
0 T (                else:) N
0 T (                    cs, ds = ds, cs) N
0 T (        except StopIteration:) N
0 T (            break) N
(55) # () N
0 T (    gt += sum\(1 for _ in xs_i\)) N
0 T () N
0 T (    print\('gt: {}\\t eq: {}'.format\(gt, eq\)\)) N
0 T (    return \(gt + eq / 2\) / \(len\(xs\) * len\(ys\)\)) N
(60) # () N
0 T () N
0 T (def test_statistic\(y, z\):) N
0 T (    """Checks if two means are different, tempered) N
0 T (     by the sample size of 'y' and 'z'""") N
(65) # (    delta = z.mean\(\) - y.mean\(\)) N
0 T (    sd_y = y.standard_deviation\(\)) N
0 T (    sd_z = z.standard_deviation\(\)) N
0 T () N
0 T (    if sd_y + sd_z:) N
(70) # (        delta /= memo_sqrt\(sd_y / len\(y\) + sd_z / len\(z\)\)) N
0 T () N
0 T (    return delta) N
0 T () N
("csc710sbse: hw7: Witschey") (Page 1/3) (Nov 05, 14 19:45) title
border
/v 1 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T () p n
(75) # (def bootstrap\(y0, z0, conf=0.01, b=1000\):) N
0 T (    """) N
0 T (    The bootstrap hypothesis test from p220 to 223 of Efron's book 'An) N
0 T (    introduction to the boostrap.) N
0 T () N
(80) # (    Simple way to describe: "If you randomly generate 1000 similar datasets,) N
0 T (    is a likely to be significantly different to b?") N
0 T (    """) N
0 T (    y, z = NumberLog\(y0\), NumberLog\(z0\)) N
0 T (    x = NumberLog\(inits=\(y, z\)\)) N
(85) # (    observed_mean_difference = test_statistic\(y, z\)) N
0 T (    yhat = tuple\(y1 - y.mean\(\) + x.mean\(\) for y1 in y.contents\(\)\)) N
0 T (    zhat = tuple\(z1 - z.mean\(\) + x.mean\(\) for z1 in z.contents\(\)\)) N
0 T (    bigger = 0) N
0 T (    for i in range\(b\):) N
(90) # (        # sample with replacement for yhat and zhat) N
0 T (        swr_yhat = \(random.choice\(yhat\) for _ in yhat\)) N
0 T (        swr_zhat = \(random.choice\(zhat\) for _ in zhat\)) N
0 T (        sampled_mean_difference = test_statistic\() N
0 T (            NumberLog\(swr_yhat, max_size=None\),) N
(95) # (            NumberLog\(swr_zhat, max_size=None\)\)) N
0 T (        if sampled_mean_difference > observed_mean_difference:) N
0 T (            bigger += 1) N
0 T (    return bigger / b < conf) N
0 T () N
(100) # () N
0 T (def different\(xs, ys\):) N
0 T (    """) N
0 T (    Quick test to see if 2 things are different. A12 is a reasonable first) N
0 T (    approximation, and fast, and if it gets past A12, run the slower, more) N
(105) # (    authoritative, bootstrap.) N
0 T (    """) N
0 T (    return a12\(xs, ys\) and bootstrap\(xs, ys\)) N
0 T () N
0 T () N
(110) # (def scottknott\(data, max_rank_size=3, epsilon=0.01\):) N
0 T (    """) N
0 T (    Recursively split data, maximizing delta of the expected value of the) N
0 T (    mean before and after the splits. Reject splits with under max_rank_size) N
0 T (    items.) N
(115) # (    """) N
0 T (    flat_data = [x for log in data for x in log.contents\(\)]) N
0 T (    data_mean = basic_stats.mean\(flat_data\)) N
0 T () N
0 T (    def recurse_and_rank\(parts, rank=0\):) N
(120) # (        "Split, then recurse_and_rank on each part.") N
0 T () N
0 T (        cut = min_mu\(parts, data_mean, len\(flat_data\), max_rank_size, epsilon\)) N
0 T (        if cut:) N
0 T (            # if cut, rank "right" higher than "left") N
(125) # (            rank = recurse_and_rank\(parts[:cut], rank\) + 1) N
0 T (            rank = recurse_and_rank\(parts[cut:], rank\)) N
0 T (        else:) N
0 T (            # if no cut, then all get same rank) N
0 T (            for part in parts:) N
(130) # (                part.rank = rank) N
0 T (        return rank) N
0 T () N
0 T (    recurse_and_rank\(sorted\(data, key=lambda x: x.median\(\)\)\)) N
0 T () N
(135) # (    return data) N
0 T () N
0 T () N
0 T (def min_mu\(parts, data_mean, data_size, max_rank_size, epsilon\):) N
0 T (    """Find a cut in the parts that maximizes the expected value of the) N
(140) # (    difference in the mean before and after the cut. Reject splits that are) N
0 T (    insignificantly different or that generate very small subsets.) N
0 T (    """) N
0 T (    cut = None) N
0 T (    max_delta = 0) N
(145) # (    mrs = max_rank_size) N
0 T (    for i, left, right in left_right\(parts, epsilon\):) N
("csc710sbse: hw7: Witschey") (Page 2/3) (Nov 05, 14 19:45) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/rdiv.py) (17/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 2.965278 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
0 T (        if len\(parts[:i]\) >= mrs and len\(parts[i:]\) >= mrs:) p n
0 T (            delta = len\(left\) / data_size * \(data_mean - left.mean\(\)\) ** 2) N
0 T (            delta += len\(right\) / data_size * \(data_mean - right.mean\(\)\) ** 2) N
(150) # () N
0 T (            if abs\(delta\) > max_delta and different\(parts[i-1], parts[i]\):) N
0 T (                max_delta, cut = abs\(delta\), i) N
0 T (    return cut) N
0 T () N
(155) # () N
0 T (def left_right\(parts, epsilon=0.01\):) N
0 T (    """For each item in 'parts', yield the splitting index, everything to the) N
0 T (    beginning \(including the item\) and everything to the end.) N
0 T (    """) N
(160) # (    for i in range\(1, len\(parts\)\):) N
0 T (        if parts[i].median\(\) - parts[i - 1].median\(\) > epsilon:) N
0 T (            left = NumberLog\(\(p for p in parts[:i]\), max_size=None\)) N
0 T (            right = NumberLog\(\(p for p in parts[i:]\), max_size=None\)) N
0 T (            yield i, left, right) N
(165) # () N
0 T () N
0 T (def rdiv_report\(data\):) N
0 T (    """) N
0 T (    Generate a tabular report on the data. Assumes data is in lists, where the) N
(170) # (    first element of each list is its name.) N
0 T (    """) N
0 T (    # wrap each line in a NumberLog) N
0 T (    data = map\(lambda xs: NumberLog\(label=xs[0], inits=xs[1:], max_size=None\),) N
0 T (               data\)) N
(175) # () N
0 T (    # sort by rank & median within each rank) N
0 T (    # sorting is stable, so sort by median first, then rank) N
0 T (    ranked = sorted\(\(x for x in scottknott\(data, max_rank_size=1\)\),) N
0 T (                    key=lambda y: y.median\(\)\)) N
(180) # (    ranked = tuple\(sorted\(ranked, key=lambda y: y.rank\)\)) N
0 T () N
0 T (    # get high and low values for entire dataset) N
0 T (    lo = min\(log.lo for log in data\)) N
0 T (    hi = max\(log.hi for log in data\)) N
(185) # () N
0 T (    # generate column names) N
0 T (    rows = [['rank', 'name', 'med', 'iqr', '',) N
0 T (            '10%', '30%', '50%', '70%', '90%']]) N
0 T () N
(190) # (    # generate rows) N
0 T (    for x in ranked:) N
0 T (        # each row starts with 'rank label, median, iqr') N
0 T (        next_row = [x.rank + 1]) N
0 T (        next_row.append\(x.label + ','\)) N
(195) # (        next_row.append\('{0:0.2},'.format\(float\(x.median\(\)\)\)\)) N
0 T (        next_row.append\('{0:0.2}'.format\(float\(x.iqr\(\)\)\)\)) N
0 T () N
0 T (        # get xtile: '\( -* | -- \) ##, ##, ##, ##, ##') N
0 T (        xtile_out = xtile\(x.contents\(\), lo=lo, hi=hi, width=30, as_list=True\)) N
(200) # (        # xtile is displayed as the whisker plot, then comma-separated values) N
0 T (        row_xtile = [xtile_out[0]]) N
0 T (        # don't use `join`, we want each to be its own list element) N
0 T (        row_xtile.extend\(map\(lambda x: x + ',', xtile_out[1:-1]\)\)) N
0 T (        row_xtile.append\(xtile_out[-1]\)) N
(205) # () N
0 T (        next_row.extend\(row_xtile\)) N
0 T (        rows.append\(next_row\)) N
0 T () N
0 T (    table = texttable.Texttable\(200\)) N
(210) # (    table.set_precision\(2\)) N
0 T (    table.set_cols_dtype\(['t', 't', 't', 't', 't', 't', 't', 't', 't', 't']\)) N
0 T (    table.set_cols_align\(['r', 'l', 'l', 'r', 'c', 'r', 'r', 'r', 'r', 'r']\)) N
0 T (    table.set_deco\(texttable.Texttable.HEADER\)) N
0 T (    table.add_rows\(rows\)) N
(215) # (    return table.draw\(\)) N
("csc710sbse: hw7: Witschey") (Page 3/3) (Nov 05, 14 19:45) title
border
grestore
(Printed by Jim Witschey) rhead
(witschey/rdiv.py) (18/18) (Thursday November 06, 2014) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
